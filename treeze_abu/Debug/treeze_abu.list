
treeze_abu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a4  080065a4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080065a4  080065a4  000165a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ac  080065ac  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ac  080065ac  000165ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080065b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f68  2000006c  08006620  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fd4  08006620  00020fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012860  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003046  00000000  00000000  0003293f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  00035988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c13  00000000  00000000  00036960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000442c  00000000  00000000  00037573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135af  00000000  00000000  0003b99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3b11  00000000  00000000  0004ef4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004748  00000000  00000000  00142a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001471a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080064a0 	.word	0x080064a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080064a0 	.word	0x080064a0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Increase_Binary>:
 */

#include <stdint.h>
#include "binary_msg.h"

void Increase_Binary(uint8_t *num, MessageQ *pMsgQ) {
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < 4; i++) {
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e006      	b.n	80005da <Increase_Binary+0x1e>
		pMsgQ->param[i] = 0;
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	2100      	movs	r1, #0
 80005d2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	3301      	adds	r3, #1
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d9f5      	bls.n	80005cc <Increase_Binary+0x10>
	}

	if (*num & 0b0001) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <Increase_Binary+0x36>
		pMsgQ->param[0] = 1;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
	}
	if (*num & 0b0010) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <Increase_Binary+0x48>
		pMsgQ->param[1] = 1;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	2201      	movs	r2, #1
 8000602:	705a      	strb	r2, [r3, #1]
	}
	if (*num & 0b0100) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <Increase_Binary+0x5a>
		pMsgQ->param[2] = 1;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	2201      	movs	r2, #1
 8000614:	709a      	strb	r2, [r3, #2]
	}
	if (*num & 0b1000) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <Increase_Binary+0x6c>
		pMsgQ->param[3] = 1;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2201      	movs	r2, #1
 8000626:	70da      	strb	r2, [r3, #3]
	}
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b090      	sub	sp, #64	; 0x40
 8000638:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800063a:	f000 fbb4 	bl	8000da6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800063e:	f000 f881 	bl	8000744 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000642:	f000 f90b 	bl	800085c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000646:	f000 f8bd 	bl	80007c4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOE,
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 41aa 	mov.w	r1, #21760	; 0x5500
 8000650:	4832      	ldr	r0, [pc, #200]	; (800071c <main+0xe8>)
 8000652:	f000 fea1 	bl	8001398 <HAL_GPIO_WritePin>
	GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_12 | GPIO_PIN_14, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE,
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 412a 	mov.w	r1, #43520	; 0xaa00
 800065c:	482f      	ldr	r0, [pc, #188]	; (800071c <main+0xe8>)
 800065e:	f000 fe9b 	bl	8001398 <HAL_GPIO_WritePin>
	GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_15, GPIO_PIN_RESET);

	printf("hello!!!\r\n");
 8000662:	482f      	ldr	r0, [pc, #188]	; (8000720 <main+0xec>)
 8000664:	f005 f850 	bl	8005708 <puts>
	for (uint8_t i = 0; i < 10; i++) {
 8000668:	2300      	movs	r3, #0
 800066a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800066e:	e00d      	b.n	800068c <main+0x58>
		HAL_GPIO_TogglePin(GPIOE, 0xFF00);
 8000670:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000674:	4829      	ldr	r0, [pc, #164]	; (800071c <main+0xe8>)
 8000676:	f000 fea7 	bl	80013c8 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800067a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800067e:	f000 fc03 	bl	8000e88 <HAL_Delay>
	for (uint8_t i = 0; i < 10; i++) {
 8000682:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000686:	3301      	adds	r3, #1
 8000688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800068c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000690:	2b09      	cmp	r3, #9
 8000692:	d9ed      	bls.n	8000670 <main+0x3c>
	}
	MX_GPIO_Init();
 8000694:	f000 f8e2 	bl	800085c <MX_GPIO_Init>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of Queue01 */
	osMessageQDef(Queue01, 16, uint32_t);
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <main+0xf0>)
 800069a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800069e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a2:	e883 0003 	stmia.w	r3, {r0, r1}
	Queue01Handle = osMessageCreate(osMessageQ(Queue01), NULL);
 80006a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fe3b 	bl	8003328 <osMessageCreate>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <main+0xf4>)
 80006b6:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	osPoolDef(Pool_ID_, sizeof(MessageQ), MessageQ);
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <main+0xf8>)
 80006ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006be:	ca07      	ldmia	r2, {r0, r1, r2}
 80006c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	Pool_ID = osPoolCreate(osPool(Pool_ID_));
 80006c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fd2d 	bl	8003128 <osPoolCreate>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a17      	ldr	r2, [pc, #92]	; (8000730 <main+0xfc>)
 80006d2:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of SendTask */
	osThreadDef(SendTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006d4:	4b17      	ldr	r3, [pc, #92]	; (8000734 <main+0x100>)
 80006d6:	f107 0414 	add.w	r4, r7, #20
 80006da:	461d      	mov	r5, r3
 80006dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e0:	682b      	ldr	r3, [r5, #0]
 80006e2:	6023      	str	r3, [r4, #0]
	SendTaskHandle = osThreadCreate(osThread(SendTask), NULL);
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fce1 	bl	80030b2 <osThreadCreate>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a11      	ldr	r2, [pc, #68]	; (8000738 <main+0x104>)
 80006f4:	6013      	str	r3, [r2, #0]

	/* definition and creation of ReceiveTask */
	osThreadDef(ReceiveTask, StartTask02, osPriorityIdle, 0, 128);
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <main+0x108>)
 80006f8:	463c      	mov	r4, r7
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	682b      	ldr	r3, [r5, #0]
 8000702:	6023      	str	r3, [r4, #0]
	ReceiveTaskHandle = osThreadCreate(osThread(ReceiveTask), NULL);
 8000704:	463b      	mov	r3, r7
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fcd2 	bl	80030b2 <osThreadCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <main+0x10c>)
 8000712:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000714:	f002 fcc6 	bl	80030a4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000718:	e7fe      	b.n	8000718 <main+0xe4>
 800071a:	bf00      	nop
 800071c:	48001000 	.word	0x48001000
 8000720:	080064b8 	.word	0x080064b8
 8000724:	080064c4 	.word	0x080064c4
 8000728:	20000124 	.word	0x20000124
 800072c:	080064cc 	.word	0x080064cc
 8000730:	20000128 	.word	0x20000128
 8000734:	080064e4 	.word	0x080064e4
 8000738:	2000011c 	.word	0x2000011c
 800073c:	08006504 	.word	0x08006504
 8000740:	20000120 	.word	0x20000120

08000744 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	2238      	movs	r2, #56	; 0x38
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 f8b8 	bl	80058c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000766:	f44f 7000 	mov.w	r0, #512	; 0x200
 800076a:	f000 fe47 	bl	80013fc <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000780:	f107 0318 	add.w	r3, r7, #24
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fedd 	bl	8001544 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x50>
		Error_Handler();
 8000790:	f000 f95a 	bl	8000a48 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000798:	2301      	movs	r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 f9e1 	bl	8001b74 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x78>
		Error_Handler();
 80007b8:	f000 f946 	bl	8000a48 <Error_Handler>
	}
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007ca:	4a23      	ldr	r2, [pc, #140]	; (8000858 <MX_USART1_UART_Init+0x94>)
 80007cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_USART1_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART1_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART1_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <MX_USART1_UART_Init+0x90>)
 800080e:	f001 fe1b 	bl	8002448 <HAL_UART_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8000818:	f000 f916 	bl	8000a48 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800081c:	2100      	movs	r1, #0
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_USART1_UART_Init+0x90>)
 8000820:	f002 fb4c 	bl	8002ebc <HAL_UARTEx_SetTxFifoThreshold>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800082a:	f000 f90d 	bl	8000a48 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 800082e:	2100      	movs	r1, #0
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <MX_USART1_UART_Init+0x90>)
 8000832:	f002 fb81 	bl	8002f38 <HAL_UARTEx_SetRxFifoThreshold>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800083c:	f000 f904 	bl	8000a48 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_USART1_UART_Init+0x90>)
 8000842:	f002 fb02 	bl	8002e4a <HAL_UARTEx_DisableFifoMode>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 800084c:	f000 f8fc 	bl	8000a48 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000008c 	.word	0x2000008c
 8000858:	40013800 	.word	0x40013800

0800085c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_GPIO_Init+0x90>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <MX_GPIO_Init+0x90>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_GPIO_Init+0x90>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_GPIO_Init+0x90>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <MX_GPIO_Init+0x90>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_GPIO_Init+0x90>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_GPIO_Init+0x90>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <MX_GPIO_Init+0x90>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_GPIO_Init+0x90>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <MX_GPIO_Init+0x94>)
 80008c2:	f000 fd69 	bl	8001398 <HAL_GPIO_WritePin>
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);

	/*Configure GPIO pins : PE8 PE9 PE10 PE11
	 PE12 PE13 PE14 PE15 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
 80008c6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80008ca:	60fb      	str	r3, [r7, #12]
			| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0x94>)
 80008e0:	f000 fbd8 	bl	8001094 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48001000 	.word	0x48001000

080008f4 <StartDefaultTask>:
 * @brief  Function implementing the SendTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint8_t num = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]

	/* Infinite loop */
	for (;;) {
		if (num == 16) {
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	2b10      	cmp	r3, #16
 8000904:	d101      	bne.n	800090a <StartDefaultTask+0x16>
			num = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
		}

		pMsgQ = (MessageQ*) osPoolAlloc(Pool_ID);
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <StartDefaultTask+0x5c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f002 fc67 	bl	80031e2 <osPoolAlloc>
 8000914:	4603      	mov	r3, r0
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <StartDefaultTask+0x60>)
 8000918:	6013      	str	r3, [r2, #0]
		Increase_Binary(&num, pMsgQ);
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <StartDefaultTask+0x60>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f107 030f 	add.w	r3, r7, #15
 8000922:	4611      	mov	r1, r2
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fe49 	bl	80005bc <Increase_Binary>
		osMessagePut(Queue01Handle, (uint32_t) pMsgQ, osWaitForever);
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <StartDefaultTask+0x64>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <StartDefaultTask+0x60>)
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	4611      	mov	r1, r2
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fd07 	bl	800334c <osMessagePut>

		num++;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	3301      	adds	r3, #1
 8000942:	b2db      	uxtb	r3, r3
 8000944:	73fb      	strb	r3, [r7, #15]
		osDelay(1000);
 8000946:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094a:	f002 fbd9 	bl	8003100 <osDelay>
		if (num == 16) {
 800094e:	e7d7      	b.n	8000900 <StartDefaultTask+0xc>
 8000950:	20000128 	.word	0x20000128
 8000954:	20000088 	.word	0x20000088
 8000958:	20000124 	.word	0x20000124

0800095c <StartTask02>:
 * @brief Function implementing the ReceiveTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af02      	add	r7, sp, #8
 8000962:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		osEvent event = osMessageGet(Queue01Handle, osWaitForever);
 8000964:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <StartTask02+0xd8>)
 8000966:	6819      	ldr	r1, [r3, #0]
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	f04f 32ff 	mov.w	r2, #4294967295
 8000970:	4618      	mov	r0, r3
 8000972:	f002 fd2b 	bl	80033cc <osMessageGet>

		if (event.status == osEventMessage) {
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b10      	cmp	r3, #16
 800097a:	d156      	bne.n	8000a2a <StartTask02+0xce>
			pMsgQ = event.value.p;
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <StartTask02+0xdc>)
 8000980:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, !(pMsgQ->param[0]));
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <StartTask02+0xdc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	bf0c      	ite	eq
 800098c:	2301      	moveq	r3, #1
 800098e:	2300      	movne	r3, #0
 8000990:	b2db      	uxtb	r3, r3
 8000992:	461a      	mov	r2, r3
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	4828      	ldr	r0, [pc, #160]	; (8000a3c <StartTask02+0xe0>)
 800099a:	f000 fcfd 	bl	8001398 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, !(pMsgQ->param[1]));
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <StartTask02+0xdc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	785b      	ldrb	r3, [r3, #1]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf0c      	ite	eq
 80009a8:	2301      	moveq	r3, #1
 80009aa:	2300      	movne	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	461a      	mov	r2, r3
 80009b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b4:	4821      	ldr	r0, [pc, #132]	; (8000a3c <StartTask02+0xe0>)
 80009b6:	f000 fcef 	bl	8001398 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, !(pMsgQ->param[2]));
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <StartTask02+0xdc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	bf0c      	ite	eq
 80009c4:	2301      	moveq	r3, #1
 80009c6:	2300      	movne	r3, #0
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d0:	481a      	ldr	r0, [pc, #104]	; (8000a3c <StartTask02+0xe0>)
 80009d2:	f000 fce1 	bl	8001398 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, !(pMsgQ->param[3]));
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <StartTask02+0xdc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	78db      	ldrb	r3, [r3, #3]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf0c      	ite	eq
 80009e0:	2301      	moveq	r3, #1
 80009e2:	2300      	movne	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <StartTask02+0xe0>)
 80009ee:	f000 fcd3 	bl	8001398 <HAL_GPIO_WritePin>

			printf("%d %d %d %d\r\n", pMsgQ->param[3], pMsgQ->param[2],
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <StartTask02+0xdc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	78db      	ldrb	r3, [r3, #3]
 80009f8:	4619      	mov	r1, r3
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <StartTask02+0xdc>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	461a      	mov	r2, r3
					pMsgQ->param[1], pMsgQ->param[0]);
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <StartTask02+0xdc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	785b      	ldrb	r3, [r3, #1]
			printf("%d %d %d %d\r\n", pMsgQ->param[3], pMsgQ->param[2],
 8000a08:	4618      	mov	r0, r3
					pMsgQ->param[1], pMsgQ->param[0]);
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <StartTask02+0xdc>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
			printf("%d %d %d %d\r\n", pMsgQ->param[3], pMsgQ->param[2],
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	4603      	mov	r3, r0
 8000a14:	480a      	ldr	r0, [pc, #40]	; (8000a40 <StartTask02+0xe4>)
 8000a16:	f004 fe11 	bl	800563c <iprintf>
			osPoolFree(Pool_ID, pMsgQ);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <StartTask02+0xe8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <StartTask02+0xdc>)
 8000a20:	6812      	ldr	r2, [r2, #0]
 8000a22:	4611      	mov	r1, r2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fc3e 	bl	80032a6 <osPoolFree>
		}
		osDelay(1);
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f002 fb68 	bl	8003100 <osDelay>
	for (;;) {
 8000a30:	e798      	b.n	8000964 <StartTask02+0x8>
 8000a32:	bf00      	nop
 8000a34:	20000124 	.word	0x20000124
 8000a38:	20000088 	.word	0x20000088
 8000a3c:	48001000 	.word	0x48001000
 8000a40:	08006518 	.word	0x08006518
 8000a44:	20000128 	.word	0x20000128

08000a48 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6613      	str	r3, [r2, #96]	; 0x60
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_MspInit+0x4c>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210f      	movs	r1, #15
 8000a8e:	f06f 0001 	mvn.w	r0, #1
 8000a92:	f000 fad8 	bl	8001046 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09e      	sub	sp, #120	; 0x78
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2254      	movs	r2, #84	; 0x54
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f004 feff 	bl	80058c8 <memset>
  if(huart->Instance==USART1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <HAL_UART_MspInit+0xa8>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d137      	bne.n	8000b44 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fa63 	bl	8001fac <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aec:	f7ff ffac 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af4:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6613      	str	r3, [r2, #96]	; 0x60
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0xac>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b24:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b32:	2307      	movs	r3, #7
 8000b34:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b40:	f000 faa8 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3778      	adds	r7, #120	; 0x78
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013800 	.word	0x40013800
 8000b50:	40021000 	.word	0x40021000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 f962 	bl	8000e4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b88:	f003 ff68 	bl	8004a5c <xTaskGetSchedulerState>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d001      	beq.n	8000b96 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b92:	f004 fa29 	bl	8004fe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ba2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ba6:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d013      	beq.n	8000bda <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000bb2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bb6:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000bba:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00b      	beq.n	8000bda <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000bc2:	e000      	b.n	8000bc6 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000bc4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000bc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f9      	beq.n	8000bc4 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000bd0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000bda:	687b      	ldr	r3, [r7, #4]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_write>:
 *      Author: Kkang
 */

#include "swv_write.h"

int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	for (int32_t i = 0; i < len; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	e009      	b.n	8000c0e <_write+0x26>
		ITM_SendChar(*ptr++);
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1c5a      	adds	r2, r3, #1
 8000bfe:	60ba      	str	r2, [r7, #8]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ffc9 	bl	8000b9a <ITM_SendChar>
	for (int32_t i = 0; i < len; i++) {
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697a      	ldr	r2, [r7, #20]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbf1      	blt.n	8000bfa <_write+0x12>
	}

	return len;
 8000c16:	687b      	ldr	r3, [r7, #4]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e00a      	b.n	8000c48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c32:	f3af 8000 	nop.w
 8000c36:	4601      	mov	r1, r0
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	3301      	adds	r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697a      	ldr	r2, [r7, #20]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	dbf0      	blt.n	8000c32 <_read+0x12>
  }

  return len;
 8000c50:	687b      	ldr	r3, [r7, #4]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c82:	605a      	str	r2, [r3, #4]
  return 0;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <_isatty>:

int _isatty(int file)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f004 fe8c 	bl	8005a10 <__errno>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20020000 	.word	0x20020000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	2000012c 	.word	0x2000012c
 8000d2c:	20000fd8 	.word	0x20000fd8

08000d30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f004 fe4b 	bl	8005a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d86:	f7ff fc55 	bl	8000634 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d98:	080065b4 	.word	0x080065b4
  ldr r2, =_sbss
 8000d9c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000da0:	20000fd4 	.word	0x20000fd4

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>

08000da6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f93d 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	200f      	movs	r0, #15
 8000db8:	f000 f80e 	bl	8000dd8 <HAL_InitTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	e001      	b.n	8000dcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc8:	f7ff fe44 	bl	8000a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]

}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_InitTick+0x68>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d022      	beq.n	8000e32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_InitTick+0x6c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_InitTick+0x68>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f93a 	bl	800107a <HAL_SYSTICK_Config>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d10f      	bne.n	8000e2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	d809      	bhi.n	8000e26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e12:	2200      	movs	r2, #0
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1a:	f000 f914 	bl	8001046 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_InitTick+0x70>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e007      	b.n	8000e36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
 8000e2a:	e004      	b.n	8000e36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	73fb      	strb	r3, [r7, #15]
 8000e30:	e001      	b.n	8000e36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b05      	ldr	r3, [pc, #20]	; (8000e68 <HAL_IncTick+0x1c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x20>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <HAL_IncTick+0x1c>)
 8000e5c:	6013      	str	r3, [r2, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	20000130 	.word	0x20000130
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000130 	.word	0x20000130

08000e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff ffee 	bl	8000e70 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea0:	d004      	beq.n	8000eac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_Delay+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eac:	bf00      	nop
 8000eae:	f7ff ffdf 	bl	8000e70 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8f7      	bhi.n	8000eae <HAL_Delay+0x26>
  {
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000008 	.word	0x20000008

08000ecc <__NVIC_SetPriorityGrouping>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_SetPriority>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff47 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff5e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff90 	bl	8000f84 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5f 	bl	8000f30 <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffb2 	bl	8000fec <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010a2:	e15a      	b.n	800135a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 814c 	beq.w	8001354 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 0201 	and.w	r2, r3, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b03      	cmp	r3, #3
 8001140:	d017      	beq.n	8001172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	6939      	ldr	r1, [r7, #16]
 80011c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0203 	and.w	r2, r3, #3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80a6 	beq.w	8001354 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <HAL_GPIO_Init+0x2e4>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <HAL_GPIO_Init+0x2e4>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6613      	str	r3, [r2, #96]	; 0x60
 8001214:	4b58      	ldr	r3, [pc, #352]	; (8001378 <HAL_GPIO_Init+0x2e4>)
 8001216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <HAL_GPIO_Init+0x2e8>)
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800124a:	d01f      	beq.n	800128c <HAL_GPIO_Init+0x1f8>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <HAL_GPIO_Init+0x2ec>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d019      	beq.n	8001288 <HAL_GPIO_Init+0x1f4>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4b      	ldr	r2, [pc, #300]	; (8001384 <HAL_GPIO_Init+0x2f0>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d013      	beq.n	8001284 <HAL_GPIO_Init+0x1f0>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4a      	ldr	r2, [pc, #296]	; (8001388 <HAL_GPIO_Init+0x2f4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00d      	beq.n	8001280 <HAL_GPIO_Init+0x1ec>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a49      	ldr	r2, [pc, #292]	; (800138c <HAL_GPIO_Init+0x2f8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0x1e8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a48      	ldr	r2, [pc, #288]	; (8001390 <HAL_GPIO_Init+0x2fc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d101      	bne.n	8001278 <HAL_GPIO_Init+0x1e4>
 8001274:	2305      	movs	r3, #5
 8001276:	e00a      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 8001278:	2306      	movs	r3, #6
 800127a:	e008      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 800127c:	2304      	movs	r3, #4
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 8001280:	2303      	movs	r3, #3
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x1fa>
 800128c:	2300      	movs	r3, #0
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129e:	4937      	ldr	r1, [pc, #220]	; (800137c <HAL_GPIO_Init+0x2e8>)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <HAL_GPIO_Init+0x300>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012d0:	4a30      	ldr	r2, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x300>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d6:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x300>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012fa:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_GPIO_Init+0x300>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_GPIO_Init+0x300>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_GPIO_Init+0x300>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f ae9d 	bne.w	80010a4 <HAL_GPIO_Init+0x10>
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800
 8001388:	48000c00 	.word	0x48000c00
 800138c:	48001000 	.word	0x48001000
 8001390:	48001400 	.word	0x48001400
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43d9      	mvns	r1, r3
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	400b      	ands	r3, r1
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	619a      	str	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d141      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800140a:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001416:	d131      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001418:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800141e:	4a46      	ldr	r2, [pc, #280]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001424:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001430:	4a41      	ldr	r2, [pc, #260]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001436:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001438:	4b40      	ldr	r3, [pc, #256]	; (800153c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2232      	movs	r2, #50	; 0x32
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	4a3f      	ldr	r2, [pc, #252]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	0c9b      	lsrs	r3, r3, #18
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800144e:	e002      	b.n	8001456 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3b01      	subs	r3, #1
 8001454:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001456:	4b38      	ldr	r3, [pc, #224]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001462:	d102      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f2      	bne.n	8001450 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001476:	d158      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e057      	b.n	800152c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001482:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800148c:	e04d      	b.n	800152a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001494:	d141      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d131      	bne.n	8001508 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014bc:	4a1e      	ldr	r2, [pc, #120]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2232      	movs	r2, #50	; 0x32
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	0c9b      	lsrs	r3, r3, #18
 80014d6:	3301      	adds	r3, #1
 80014d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014da:	e002      	b.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3b01      	subs	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ee:	d102      	bne.n	80014f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f2      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001502:	d112      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e011      	b.n	800152c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800150a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001518:	e007      	b.n	800152a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001528:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40007000 	.word	0x40007000
 800153c:	20000000 	.word	0x20000000
 8001540:	431bde83 	.word	0x431bde83

08001544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e306      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d075      	beq.n	800164e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001562:	4b97      	ldr	r3, [pc, #604]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156c:	4b94      	ldr	r3, [pc, #592]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b0c      	cmp	r3, #12
 800157a:	d102      	bne.n	8001582 <HAL_RCC_OscConfig+0x3e>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d002      	beq.n	8001588 <HAL_RCC_OscConfig+0x44>
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b08      	cmp	r3, #8
 8001586:	d10b      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001588:	4b8d      	ldr	r3, [pc, #564]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d05b      	beq.n	800164c <HAL_RCC_OscConfig+0x108>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d157      	bne.n	800164c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e2e1      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a8:	d106      	bne.n	80015b8 <HAL_RCC_OscConfig+0x74>
 80015aa:	4b85      	ldr	r3, [pc, #532]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a84      	ldr	r2, [pc, #528]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0xb0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x98>
 80015c2:	4b7f      	ldr	r3, [pc, #508]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7e      	ldr	r2, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7b      	ldr	r2, [pc, #492]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0xb0>
 80015dc:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a77      	ldr	r2, [pc, #476]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a74      	ldr	r2, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80015ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fc38 	bl	8000e70 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001604:	f7ff fc34 	bl	8000e70 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b64      	cmp	r3, #100	; 0x64
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e2a6      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001616:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0xc0>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fc24 	bl	8000e70 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fc20 	bl	8000e70 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e292      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800163e:	4b60      	ldr	r3, [pc, #384]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0xe8>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d075      	beq.n	8001746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165a:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001664:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	2b0c      	cmp	r3, #12
 8001672:	d102      	bne.n	800167a <HAL_RCC_OscConfig+0x136>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d002      	beq.n	8001680 <HAL_RCC_OscConfig+0x13c>
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d11f      	bne.n	80016c0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001680:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_OscConfig+0x154>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e265      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	061b      	lsls	r3, r3, #24
 80016a6:	4946      	ldr	r1, [pc, #280]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016ac:	4b45      	ldr	r3, [pc, #276]	; (80017c4 <HAL_RCC_OscConfig+0x280>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fb91 	bl	8000dd8 <HAL_InitTick>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d043      	beq.n	8001744 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e251      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c8:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a3c      	ldr	r2, [pc, #240]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fbcc 	bl	8000e70 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016dc:	f7ff fbc8 	bl	8000e70 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e23a      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	061b      	lsls	r3, r3, #24
 8001708:	492d      	ldr	r1, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
 800170e:	e01a      	b.n	8001746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800171a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fba8 	bl	8000e70 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fba4 	bl	8000e70 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e216      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1e0>
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d041      	beq.n	80017d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d01c      	beq.n	8001794 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800175c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176a:	f7ff fb81 	bl	8000e70 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001772:	f7ff fb7d 	bl	8000e70 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1ef      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0ef      	beq.n	8001772 <HAL_RCC_OscConfig+0x22e>
 8001792:	e020      	b.n	80017d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_RCC_OscConfig+0x27c>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a4:	f7ff fb64 	bl	8000e70 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017aa:	e00d      	b.n	80017c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff fb60 	bl	8000e70 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d906      	bls.n	80017c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1d2      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000
 80017c4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c8:	4b8c      	ldr	r3, [pc, #560]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ea      	bne.n	80017ac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80a6 	beq.w	8001930 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017e8:	4b84      	ldr	r3, [pc, #528]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2b4>
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x2b6>
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6593      	str	r3, [r2, #88]	; 0x58
 800180a:	4b7c      	ldr	r3, [pc, #496]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181a:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001826:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a75      	ldr	r2, [pc, #468]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff fb1d 	bl	8000e70 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7ff fb19 	bl	8000e70 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e18b      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184c:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <HAL_RCC_OscConfig+0x4bc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d108      	bne.n	8001872 <HAL_RCC_OscConfig+0x32e>
 8001860:	4b66      	ldr	r3, [pc, #408]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001866:	4a65      	ldr	r2, [pc, #404]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001870:	e024      	b.n	80018bc <HAL_RCC_OscConfig+0x378>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d110      	bne.n	800189c <HAL_RCC_OscConfig+0x358>
 800187a:	4b60      	ldr	r3, [pc, #384]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a5e      	ldr	r2, [pc, #376]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188a:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189a:	e00f      	b.n	80018bc <HAL_RCC_OscConfig+0x378>
 800189c:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	4a56      	ldr	r2, [pc, #344]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b2:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d016      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fad4 	bl	8000e70 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff fad0 	bl	8000e70 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e140      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ed      	beq.n	80018cc <HAL_RCC_OscConfig+0x388>
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff fabd 	bl	8000e70 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff fab9 	bl	8000e70 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e129      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001910:	4b3a      	ldr	r3, [pc, #232]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ed      	bne.n	80018fa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b35      	ldr	r3, [pc, #212]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	4a34      	ldr	r2, [pc, #208]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800194a:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fa8c 	bl	8000e70 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800195c:	f7ff fa88 	bl	8000e70 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0fa      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ef      	beq.n	800195c <HAL_RCC_OscConfig+0x418>
 800197c:	e01b      	b.n	80019b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff fa6f 	bl	8000e70 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001996:	f7ff fa6b 	bl	8000e70 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0dd      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019a8:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80019aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80d1 	beq.w	8001b62 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	f000 808b 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d15e      	bne.n	8001a94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_RCC_OscConfig+0x4b8>)
 80019dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff fa45 	bl	8000e70 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	e00c      	b.n	8001a04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fa41 	bl	8000e70 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d905      	bls.n	8001a04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e0b3      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a04:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ec      	bne.n	80019ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a10:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <HAL_RCC_OscConfig+0x62c>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6a11      	ldr	r1, [r2, #32]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a20:	3a01      	subs	r2, #1
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	4311      	orrs	r1, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a2a:	0212      	lsls	r2, r2, #8
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a32:	0852      	lsrs	r2, r2, #1
 8001a34:	3a01      	subs	r2, #1
 8001a36:	0552      	lsls	r2, r2, #21
 8001a38:	4311      	orrs	r1, r2
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a3e:	0852      	lsrs	r2, r2, #1
 8001a40:	3a01      	subs	r2, #1
 8001a42:	0652      	lsls	r2, r2, #25
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a4a:	06d2      	lsls	r2, r2, #27
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	4947      	ldr	r1, [pc, #284]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a54:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a44      	ldr	r2, [pc, #272]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a60:	4b42      	ldr	r3, [pc, #264]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4a41      	ldr	r2, [pc, #260]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fa00 	bl	8000e70 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f9fc 	bl	8000e70 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e06e      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a86:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f0      	beq.n	8001a74 <HAL_RCC_OscConfig+0x530>
 8001a92:	e066      	b.n	8001b62 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001a9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001aac:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a2e      	ldr	r2, [pc, #184]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001ab2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abc:	f7ff f9d8 	bl	8000e70 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f9d4 	bl	8000e70 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e046      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f0      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x580>
 8001ae2:	e03e      	b.n	8001b62 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e039      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <HAL_RCC_OscConfig+0x628>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d12c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d123      	bne.n	8001b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d11b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d113      	bne.n	8001b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	085b      	lsrs	r3, r3, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	085b      	lsrs	r3, r3, #1
 8001b56:	3b01      	subs	r3, #1
 8001b58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	019f800c 	.word	0x019f800c

08001b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e11e      	b.n	8001dca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b91      	ldr	r3, [pc, #580]	; (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d910      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b8e      	ldr	r3, [pc, #568]	; (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f023 020f 	bic.w	r2, r3, #15
 8001ba2:	498c      	ldr	r1, [pc, #560]	; (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b8a      	ldr	r3, [pc, #552]	; (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e106      	b.n	8001dca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d073      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d129      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd0:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0f4      	b.n	8001dca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001be0:	f000 f99e 	bl	8001f20 <RCC_GetSysClockFreqFromPLLSource>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4a7c      	ldr	r2, [pc, #496]	; (8001ddc <HAL_RCC_ClockConfig+0x268>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d93f      	bls.n	8001c6e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bee:	4b7a      	ldr	r3, [pc, #488]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d033      	beq.n	8001c6e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d12f      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c0e:	4b72      	ldr	r3, [pc, #456]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c16:	4a70      	ldr	r2, [pc, #448]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e024      	b.n	8001c6e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d109      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0c6      	b.n	8001dca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c3c:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0be      	b.n	8001dca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c4c:	f000 f8ce 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4a61      	ldr	r2, [pc, #388]	; (8001ddc <HAL_RCC_ClockConfig+0x268>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d909      	bls.n	8001c6e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c62:	4a5d      	ldr	r2, [pc, #372]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b5a      	ldr	r3, [pc, #360]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4957      	ldr	r1, [pc, #348]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c80:	f7ff f8f6 	bl	8000e70 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff f8f2 	bl	8000e70 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e095      	b.n	8001dca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d023      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc8:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a42      	ldr	r2, [pc, #264]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ce8:	4a3b      	ldr	r2, [pc, #236]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001cea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4936      	ldr	r1, [pc, #216]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d105      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d0a:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4a32      	ldr	r2, [pc, #200]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001d10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d21d      	bcs.n	8001d60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 020f 	bic.w	r2, r3, #15
 8001d2c:	4929      	ldr	r1, [pc, #164]	; (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d34:	f7ff f89c 	bl	8000e70 <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f7ff f898 	bl	8000e70 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e03b      	b.n	8001dca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_RCC_ClockConfig+0x260>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1ed      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	4917      	ldr	r1, [pc, #92]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	490f      	ldr	r1, [pc, #60]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d9e:	f000 f825 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_RCC_ClockConfig+0x264>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	490c      	ldr	r1, [pc, #48]	; (8001de0 <HAL_RCC_ClockConfig+0x26c>)
 8001db0:	5ccb      	ldrb	r3, [r1, r3]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_RCC_ClockConfig+0x270>)
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <HAL_RCC_ClockConfig+0x274>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff f808 	bl	8000dd8 <HAL_InitTick>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40022000 	.word	0x40022000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	04c4b400 	.word	0x04c4b400
 8001de0:	08006530 	.word	0x08006530
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001df2:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d102      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	e047      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d102      	bne.n	8001e16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e10:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	e03e      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d136      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3301      	adds	r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e40:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e4a:	68d2      	ldr	r2, [r2, #12]
 8001e4c:	0a12      	lsrs	r2, r2, #8
 8001e4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
      break;
 8001e58:	e00c      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e5a:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	0a12      	lsrs	r2, r2, #8
 8001e68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
      break;
 8001e72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0e5b      	lsrs	r3, r3, #25
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	e001      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e94:	693b      	ldr	r3, [r7, #16]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	007a1200 	.word	0x007a1200

08001eb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a1b      	lsrs	r3, r3, #8
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	08006540 	.word	0x08006540

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ef8:	f7ff ffda 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4904      	ldr	r1, [pc, #16]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08006540 	.word	0x08006540

08001f20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d10c      	bne.n	8001f5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f44:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f4e:	68d2      	ldr	r2, [r2, #12]
 8001f50:	0a12      	lsrs	r2, r2, #8
 8001f52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f56:	fb02 f303 	mul.w	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
    break;
 8001f5c:	e00c      	b.n	8001f78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f5e:	4a12      	ldr	r2, [pc, #72]	; (8001fa8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f68:	68d2      	ldr	r2, [r2, #12]
 8001f6a:	0a12      	lsrs	r2, r2, #8
 8001f6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
    break;
 8001f76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0e5b      	lsrs	r3, r3, #25
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f92:	687b      	ldr	r3, [r7, #4]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	007a1200 	.word	0x007a1200
 8001fa8:	00f42400 	.word	0x00f42400

08001fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8098 	beq.w	80020fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b43      	ldr	r3, [pc, #268]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b40      	ldr	r3, [pc, #256]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	4a3f      	ldr	r2, [pc, #252]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a39      	ldr	r2, [pc, #228]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002002:	f7fe ff35 	bl	8000e70 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002008:	e009      	b.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7fe ff31 	bl	8000e70 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d902      	bls.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	74fb      	strb	r3, [r7, #19]
        break;
 800201c:	e005      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0ef      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d159      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01e      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	d019      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002056:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002058:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002068:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a1b      	ldr	r2, [pc, #108]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d016      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7fe fef1 	bl	8000e70 <HAL_GetTick>
 800208e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002090:	e00b      	b.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7fe feed 	bl	8000e70 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d902      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	74fb      	strb	r3, [r7, #19]
            break;
 80020a8:	e006      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ec      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020cc:	4903      	ldr	r1, [pc, #12]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020d4:	e008      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	74bb      	strb	r3, [r7, #18]
 80020da:	e005      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e8:	7c7b      	ldrb	r3, [r7, #17]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4ba7      	ldr	r3, [pc, #668]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	4aa6      	ldr	r2, [pc, #664]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002106:	4ba1      	ldr	r3, [pc, #644]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210c:	f023 0203 	bic.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	499d      	ldr	r1, [pc, #628]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002128:	4b98      	ldr	r3, [pc, #608]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	f023 020c 	bic.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4995      	ldr	r1, [pc, #596]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800214a:	4b90      	ldr	r3, [pc, #576]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002150:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	498c      	ldr	r1, [pc, #560]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800216c:	4b87      	ldr	r3, [pc, #540]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	4984      	ldr	r1, [pc, #528]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800218e:	4b7f      	ldr	r3, [pc, #508]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	497b      	ldr	r1, [pc, #492]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b0:	4b76      	ldr	r3, [pc, #472]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4973      	ldr	r1, [pc, #460]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d2:	4b6e      	ldr	r3, [pc, #440]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	496a      	ldr	r1, [pc, #424]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f4:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	4962      	ldr	r1, [pc, #392]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002216:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	4959      	ldr	r1, [pc, #356]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002238:	4b54      	ldr	r3, [pc, #336]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4951      	ldr	r1, [pc, #324]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800225a:	4b4c      	ldr	r3, [pc, #304]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	4948      	ldr	r1, [pc, #288]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002278:	2b00      	cmp	r3, #0
 800227a:	d015      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800227c:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4940      	ldr	r1, [pc, #256]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800229a:	d105      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a3a      	ldr	r2, [pc, #232]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d015      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	4932      	ldr	r1, [pc, #200]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d2:	d105      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a2c      	ldr	r2, [pc, #176]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d015      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	4924      	ldr	r1, [pc, #144]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230a:	d105      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002316:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d015      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	4916      	ldr	r1, [pc, #88]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002342:	d105      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800234e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d019      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800237a:	d109      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a02      	ldr	r2, [pc, #8]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002386:	60d3      	str	r3, [r2, #12]
 8002388:	e002      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800239c:	4b29      	ldr	r3, [pc, #164]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4926      	ldr	r1, [pc, #152]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ba:	d105      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4a20      	ldr	r2, [pc, #128]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d015      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e2:	4918      	ldr	r1, [pc, #96]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f2:	d105      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800240e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	490a      	ldr	r1, [pc, #40]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002436:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002438:	7cbb      	ldrb	r3, [r7, #18]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000

08002448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e042      	b.n	80024e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002460:	2b00      	cmp	r3, #0
 8002462:	d106      	bne.n	8002472 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7fe fb19 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2224      	movs	r2, #36	; 0x24
 8002476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f82c 	bl	80024e8 <UART_SetConfig>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e022      	b.n	80024e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fb1c 	bl	8002ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fba3 	bl	8002c24 <UART_CheckIdleState>
 80024de:	4603      	mov	r3, r0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ec:	b08c      	sub	sp, #48	; 0x30
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	431a      	orrs	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	431a      	orrs	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	4313      	orrs	r3, r2
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4baa      	ldr	r3, [pc, #680]	; (80027c0 <UART_SetConfig+0x2d8>)
 8002518:	4013      	ands	r3, r2
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002520:	430b      	orrs	r3, r1
 8002522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a9f      	ldr	r2, [pc, #636]	; (80027c4 <UART_SetConfig+0x2dc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002550:	4313      	orrs	r3, r2
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800255e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002568:	430b      	orrs	r3, r1
 800256a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	f023 010f 	bic.w	r1, r3, #15
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a90      	ldr	r2, [pc, #576]	; (80027c8 <UART_SetConfig+0x2e0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d125      	bne.n	80025d8 <UART_SetConfig+0xf0>
 800258c:	4b8f      	ldr	r3, [pc, #572]	; (80027cc <UART_SetConfig+0x2e4>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b03      	cmp	r3, #3
 8002598:	d81a      	bhi.n	80025d0 <UART_SetConfig+0xe8>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <UART_SetConfig+0xb8>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025c1 	.word	0x080025c1
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025c9 	.word	0x080025c9
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025b6:	e116      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80025b8:	2302      	movs	r3, #2
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025be:	e112      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80025c0:	2304      	movs	r3, #4
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025c6:	e10e      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80025c8:	2308      	movs	r3, #8
 80025ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025ce:	e10a      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80025d0:	2310      	movs	r3, #16
 80025d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025d6:	e106      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7c      	ldr	r2, [pc, #496]	; (80027d0 <UART_SetConfig+0x2e8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d138      	bne.n	8002654 <UART_SetConfig+0x16c>
 80025e2:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <UART_SetConfig+0x2e4>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d82d      	bhi.n	800264c <UART_SetConfig+0x164>
 80025f0:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <UART_SetConfig+0x110>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	0800264d 	.word	0x0800264d
 8002600:	0800264d 	.word	0x0800264d
 8002604:	0800264d 	.word	0x0800264d
 8002608:	0800263d 	.word	0x0800263d
 800260c:	0800264d 	.word	0x0800264d
 8002610:	0800264d 	.word	0x0800264d
 8002614:	0800264d 	.word	0x0800264d
 8002618:	08002635 	.word	0x08002635
 800261c:	0800264d 	.word	0x0800264d
 8002620:	0800264d 	.word	0x0800264d
 8002624:	0800264d 	.word	0x0800264d
 8002628:	08002645 	.word	0x08002645
 800262c:	2300      	movs	r3, #0
 800262e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002632:	e0d8      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002634:	2302      	movs	r3, #2
 8002636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800263a:	e0d4      	b.n	80027e6 <UART_SetConfig+0x2fe>
 800263c:	2304      	movs	r3, #4
 800263e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002642:	e0d0      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002644:	2308      	movs	r3, #8
 8002646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800264a:	e0cc      	b.n	80027e6 <UART_SetConfig+0x2fe>
 800264c:	2310      	movs	r3, #16
 800264e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002652:	e0c8      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a5e      	ldr	r2, [pc, #376]	; (80027d4 <UART_SetConfig+0x2ec>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d125      	bne.n	80026aa <UART_SetConfig+0x1c2>
 800265e:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <UART_SetConfig+0x2e4>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002668:	2b30      	cmp	r3, #48	; 0x30
 800266a:	d016      	beq.n	800269a <UART_SetConfig+0x1b2>
 800266c:	2b30      	cmp	r3, #48	; 0x30
 800266e:	d818      	bhi.n	80026a2 <UART_SetConfig+0x1ba>
 8002670:	2b20      	cmp	r3, #32
 8002672:	d00a      	beq.n	800268a <UART_SetConfig+0x1a2>
 8002674:	2b20      	cmp	r3, #32
 8002676:	d814      	bhi.n	80026a2 <UART_SetConfig+0x1ba>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <UART_SetConfig+0x19a>
 800267c:	2b10      	cmp	r3, #16
 800267e:	d008      	beq.n	8002692 <UART_SetConfig+0x1aa>
 8002680:	e00f      	b.n	80026a2 <UART_SetConfig+0x1ba>
 8002682:	2300      	movs	r3, #0
 8002684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002688:	e0ad      	b.n	80027e6 <UART_SetConfig+0x2fe>
 800268a:	2302      	movs	r3, #2
 800268c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002690:	e0a9      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002692:	2304      	movs	r3, #4
 8002694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002698:	e0a5      	b.n	80027e6 <UART_SetConfig+0x2fe>
 800269a:	2308      	movs	r3, #8
 800269c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026a0:	e0a1      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80026a2:	2310      	movs	r3, #16
 80026a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026a8:	e09d      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4a      	ldr	r2, [pc, #296]	; (80027d8 <UART_SetConfig+0x2f0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d125      	bne.n	8002700 <UART_SetConfig+0x218>
 80026b4:	4b45      	ldr	r3, [pc, #276]	; (80027cc <UART_SetConfig+0x2e4>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80026be:	2bc0      	cmp	r3, #192	; 0xc0
 80026c0:	d016      	beq.n	80026f0 <UART_SetConfig+0x208>
 80026c2:	2bc0      	cmp	r3, #192	; 0xc0
 80026c4:	d818      	bhi.n	80026f8 <UART_SetConfig+0x210>
 80026c6:	2b80      	cmp	r3, #128	; 0x80
 80026c8:	d00a      	beq.n	80026e0 <UART_SetConfig+0x1f8>
 80026ca:	2b80      	cmp	r3, #128	; 0x80
 80026cc:	d814      	bhi.n	80026f8 <UART_SetConfig+0x210>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <UART_SetConfig+0x1f0>
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d008      	beq.n	80026e8 <UART_SetConfig+0x200>
 80026d6:	e00f      	b.n	80026f8 <UART_SetConfig+0x210>
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026de:	e082      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80026e0:	2302      	movs	r3, #2
 80026e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026e6:	e07e      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80026e8:	2304      	movs	r3, #4
 80026ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ee:	e07a      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80026f0:	2308      	movs	r3, #8
 80026f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026f6:	e076      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80026f8:	2310      	movs	r3, #16
 80026fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026fe:	e072      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a35      	ldr	r2, [pc, #212]	; (80027dc <UART_SetConfig+0x2f4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d12a      	bne.n	8002760 <UART_SetConfig+0x278>
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <UART_SetConfig+0x2e4>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002718:	d01a      	beq.n	8002750 <UART_SetConfig+0x268>
 800271a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800271e:	d81b      	bhi.n	8002758 <UART_SetConfig+0x270>
 8002720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002724:	d00c      	beq.n	8002740 <UART_SetConfig+0x258>
 8002726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800272a:	d815      	bhi.n	8002758 <UART_SetConfig+0x270>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <UART_SetConfig+0x250>
 8002730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002734:	d008      	beq.n	8002748 <UART_SetConfig+0x260>
 8002736:	e00f      	b.n	8002758 <UART_SetConfig+0x270>
 8002738:	2300      	movs	r3, #0
 800273a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800273e:	e052      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002740:	2302      	movs	r3, #2
 8002742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002746:	e04e      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002748:	2304      	movs	r3, #4
 800274a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800274e:	e04a      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002750:	2308      	movs	r3, #8
 8002752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002756:	e046      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002758:	2310      	movs	r3, #16
 800275a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800275e:	e042      	b.n	80027e6 <UART_SetConfig+0x2fe>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <UART_SetConfig+0x2dc>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d13a      	bne.n	80027e0 <UART_SetConfig+0x2f8>
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <UART_SetConfig+0x2e4>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002774:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002778:	d01a      	beq.n	80027b0 <UART_SetConfig+0x2c8>
 800277a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800277e:	d81b      	bhi.n	80027b8 <UART_SetConfig+0x2d0>
 8002780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002784:	d00c      	beq.n	80027a0 <UART_SetConfig+0x2b8>
 8002786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800278a:	d815      	bhi.n	80027b8 <UART_SetConfig+0x2d0>
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <UART_SetConfig+0x2b0>
 8002790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002794:	d008      	beq.n	80027a8 <UART_SetConfig+0x2c0>
 8002796:	e00f      	b.n	80027b8 <UART_SetConfig+0x2d0>
 8002798:	2300      	movs	r3, #0
 800279a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800279e:	e022      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80027a0:	2302      	movs	r3, #2
 80027a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027a6:	e01e      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80027a8:	2304      	movs	r3, #4
 80027aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027ae:	e01a      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80027b0:	2308      	movs	r3, #8
 80027b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027b6:	e016      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80027b8:	2310      	movs	r3, #16
 80027ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027be:	e012      	b.n	80027e6 <UART_SetConfig+0x2fe>
 80027c0:	cfff69f3 	.word	0xcfff69f3
 80027c4:	40008000 	.word	0x40008000
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40004400 	.word	0x40004400
 80027d4:	40004800 	.word	0x40004800
 80027d8:	40004c00 	.word	0x40004c00
 80027dc:	40005000 	.word	0x40005000
 80027e0:	2310      	movs	r3, #16
 80027e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4aae      	ldr	r2, [pc, #696]	; (8002aa4 <UART_SetConfig+0x5bc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f040 8097 	bne.w	8002920 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d823      	bhi.n	8002842 <UART_SetConfig+0x35a>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <UART_SetConfig+0x318>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002825 	.word	0x08002825
 8002804:	08002843 	.word	0x08002843
 8002808:	0800282d 	.word	0x0800282d
 800280c:	08002843 	.word	0x08002843
 8002810:	08002833 	.word	0x08002833
 8002814:	08002843 	.word	0x08002843
 8002818:	08002843 	.word	0x08002843
 800281c:	08002843 	.word	0x08002843
 8002820:	0800283b 	.word	0x0800283b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002824:	f7ff fb50 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8002828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800282a:	e010      	b.n	800284e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800282c:	4b9e      	ldr	r3, [pc, #632]	; (8002aa8 <UART_SetConfig+0x5c0>)
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002830:	e00d      	b.n	800284e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002832:	f7ff fadb 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002838:	e009      	b.n	800284e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800283a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002840:	e005      	b.n	800284e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800284c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8130 	beq.w	8002ab6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	4a94      	ldr	r2, [pc, #592]	; (8002aac <UART_SetConfig+0x5c4>)
 800285c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002860:	461a      	mov	r2, r3
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	fbb3 f3f2 	udiv	r3, r3, r2
 8002868:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4413      	add	r3, r2
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	429a      	cmp	r2, r3
 8002878:	d305      	bcc.n	8002886 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	429a      	cmp	r2, r3
 8002884:	d903      	bls.n	800288e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800288c:	e113      	b.n	8002ab6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	2200      	movs	r2, #0
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	60fa      	str	r2, [r7, #12]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	4a84      	ldr	r2, [pc, #528]	; (8002aac <UART_SetConfig+0x5c4>)
 800289c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2200      	movs	r2, #0
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028b0:	f7fd fd06 	bl	80002c0 <__aeabi_uldivmod>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	020b      	lsls	r3, r1, #8
 80028c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80028ca:	0202      	lsls	r2, r0, #8
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	6849      	ldr	r1, [r1, #4]
 80028d0:	0849      	lsrs	r1, r1, #1
 80028d2:	2000      	movs	r0, #0
 80028d4:	460c      	mov	r4, r1
 80028d6:	4605      	mov	r5, r0
 80028d8:	eb12 0804 	adds.w	r8, r2, r4
 80028dc:	eb43 0905 	adc.w	r9, r3, r5
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	469a      	mov	sl, r3
 80028e8:	4693      	mov	fp, r2
 80028ea:	4652      	mov	r2, sl
 80028ec:	465b      	mov	r3, fp
 80028ee:	4640      	mov	r0, r8
 80028f0:	4649      	mov	r1, r9
 80028f2:	f7fd fce5 	bl	80002c0 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4613      	mov	r3, r2
 80028fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002904:	d308      	bcc.n	8002918 <UART_SetConfig+0x430>
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290c:	d204      	bcs.n	8002918 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a3a      	ldr	r2, [r7, #32]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	e0ce      	b.n	8002ab6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800291e:	e0ca      	b.n	8002ab6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002928:	d166      	bne.n	80029f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800292a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800292e:	2b08      	cmp	r3, #8
 8002930:	d827      	bhi.n	8002982 <UART_SetConfig+0x49a>
 8002932:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <UART_SetConfig+0x450>)
 8002934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002938:	0800295d 	.word	0x0800295d
 800293c:	08002965 	.word	0x08002965
 8002940:	0800296d 	.word	0x0800296d
 8002944:	08002983 	.word	0x08002983
 8002948:	08002973 	.word	0x08002973
 800294c:	08002983 	.word	0x08002983
 8002950:	08002983 	.word	0x08002983
 8002954:	08002983 	.word	0x08002983
 8002958:	0800297b 	.word	0x0800297b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800295c:	f7ff fab4 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002962:	e014      	b.n	800298e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002964:	f7ff fac6 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800296a:	e010      	b.n	800298e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800296c:	4b4e      	ldr	r3, [pc, #312]	; (8002aa8 <UART_SetConfig+0x5c0>)
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002970:	e00d      	b.n	800298e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002972:	f7ff fa3b 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8002976:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002978:	e009      	b.n	800298e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800297a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002980:	e005      	b.n	800298e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800298c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8090 	beq.w	8002ab6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	4a44      	ldr	r2, [pc, #272]	; (8002aac <UART_SetConfig+0x5c4>)
 800299c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029a0:	461a      	mov	r2, r3
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80029a8:	005a      	lsls	r2, r3, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	441a      	add	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	d916      	bls.n	80029f0 <UART_SetConfig+0x508>
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c8:	d212      	bcs.n	80029f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f023 030f 	bic.w	r3, r3, #15
 80029d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	b29a      	uxth	r2, r3
 80029e0:	8bfb      	ldrh	r3, [r7, #30]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	8bfa      	ldrh	r2, [r7, #30]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	e062      	b.n	8002ab6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80029f6:	e05e      	b.n	8002ab6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d828      	bhi.n	8002a52 <UART_SetConfig+0x56a>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <UART_SetConfig+0x520>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a2d 	.word	0x08002a2d
 8002a0c:	08002a35 	.word	0x08002a35
 8002a10:	08002a3d 	.word	0x08002a3d
 8002a14:	08002a53 	.word	0x08002a53
 8002a18:	08002a43 	.word	0x08002a43
 8002a1c:	08002a53 	.word	0x08002a53
 8002a20:	08002a53 	.word	0x08002a53
 8002a24:	08002a53 	.word	0x08002a53
 8002a28:	08002a4b 	.word	0x08002a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a2c:	f7ff fa4c 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a32:	e014      	b.n	8002a5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a34:	f7ff fa5e 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 8002a38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a3a:	e010      	b.n	8002a5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <UART_SetConfig+0x5c0>)
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a40:	e00d      	b.n	8002a5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a42:	f7ff f9d3 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a48:	e009      	b.n	8002a5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a50:	e005      	b.n	8002a5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002a5c:	bf00      	nop
    }

    if (pclk != 0U)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d028      	beq.n	8002ab6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	4a10      	ldr	r2, [pc, #64]	; (8002aac <UART_SetConfig+0x5c4>)
 8002a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	441a      	add	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	d910      	bls.n	8002ab0 <UART_SetConfig+0x5c8>
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d20c      	bcs.n	8002ab0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	e009      	b.n	8002ab6 <UART_SetConfig+0x5ce>
 8002aa2:	bf00      	nop
 8002aa4:	40008000 	.word	0x40008000
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	08006548 	.word	0x08006548
      }
      else
      {
        ret = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002ad2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3730      	adds	r7, #48	; 0x30
 8002ada:	46bd      	mov	sp, r7
 8002adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01a      	beq.n	8002bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bde:	d10a      	bne.n	8002bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c34:	f7fe f91c 	bl	8000e70 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d10e      	bne.n	8002c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f82f 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e025      	b.n	8002cb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d10e      	bne.n	8002c92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f819 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e00f      	b.n	8002cb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b09c      	sub	sp, #112	; 0x70
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cca:	e0a9      	b.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	f000 80a5 	beq.w	8002e20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7fe f8cb 	bl	8000e70 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <UART_WaitOnFlagUntilTimeout+0x32>
 8002ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d140      	bne.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d00:	667b      	str	r3, [r7, #100]	; 0x64
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e6      	bne.n	8002cec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3308      	adds	r3, #8
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e069      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d051      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d8a:	d149      	bne.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	e853 3f00 	ldrex	r3, [r3]
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
 8002db6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dbc:	e841 2300 	strex	r3, r2, [r1]
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e6      	bne.n	8002d96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3308      	adds	r3, #8
 8002de6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002de8:	623a      	str	r2, [r7, #32]
 8002dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	69f9      	ldr	r1, [r7, #28]
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e010      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f43f af46 	beq.w	8002ccc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3770      	adds	r7, #112	; 0x70
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e027      	b.n	8002eb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e02d      	b.n	8002f30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f84f 	bl	8002fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e02d      	b.n	8002fac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f811 	bl	8002fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d108      	bne.n	8002fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fd4:	e031      	b.n	800303a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fda:	2308      	movs	r3, #8
 8002fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	0e5b      	lsrs	r3, r3, #25
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	0f5b      	lsrs	r3, r3, #29
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ffe:	7bbb      	ldrb	r3, [r7, #14]
 8003000:	7b3a      	ldrb	r2, [r7, #12]
 8003002:	4911      	ldr	r1, [pc, #68]	; (8003048 <UARTEx_SetNbDataToProcess+0x94>)
 8003004:	5c8a      	ldrb	r2, [r1, r2]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800300a:	7b3a      	ldrb	r2, [r7, #12]
 800300c:	490f      	ldr	r1, [pc, #60]	; (800304c <UARTEx_SetNbDataToProcess+0x98>)
 800300e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003010:	fb93 f3f2 	sdiv	r3, r3, r2
 8003014:	b29a      	uxth	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	7b7a      	ldrb	r2, [r7, #13]
 8003020:	4909      	ldr	r1, [pc, #36]	; (8003048 <UARTEx_SetNbDataToProcess+0x94>)
 8003022:	5c8a      	ldrb	r2, [r1, r2]
 8003024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003028:	7b7a      	ldrb	r2, [r7, #13]
 800302a:	4908      	ldr	r1, [pc, #32]	; (800304c <UARTEx_SetNbDataToProcess+0x98>)
 800302c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800302e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	08006560 	.word	0x08006560
 800304c:	08006568 	.word	0x08006568

08003050 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800305e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003062:	2b84      	cmp	r3, #132	; 0x84
 8003064:	d005      	beq.n	8003072 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003066:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4413      	add	r3, r2
 800306e:	3303      	adds	r3, #3
 8003070:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3714      	adds	r7, #20
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003086:	f3ef 8305 	mrs	r3, IPSR
 800308a:	607b      	str	r3, [r7, #4]
  return(result);
 800308c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030a8:	f001 f8fe 	bl	80042a8 <vTaskStartScheduler>
  
  return osOK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030b4:	b087      	sub	sp, #28
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685c      	ldr	r4, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030c8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ffbd 	bl	8003050 <makeFreeRtosPriority>
 80030d6:	4602      	mov	r2, r0
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	9200      	str	r2, [sp, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4632      	mov	r2, r6
 80030e4:	4629      	mov	r1, r5
 80030e6:	4620      	mov	r0, r4
 80030e8:	f000 ff60 	bl	8003fac <xTaskCreate>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003100 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <osDelay+0x16>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	e000      	b.n	8003118 <osDelay+0x18>
 8003116:	2301      	movs	r3, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f001 f891 	bl	8004240 <vTaskDelay>
  
  return osOK;
 800311e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003120:	4618      	mov	r0, r3
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	3303      	adds	r3, #3
 8003136:	f023 0303 	bic.w	r3, r3, #3
 800313a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800313c:	2014      	movs	r0, #20
 800313e:	f001 ffe3 	bl	8005108 <pvPortMalloc>
 8003142:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d046      	beq.n	80031d8 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f001 ffd0 	bl	8005108 <pvPortMalloc>
 8003168:	4602      	mov	r2, r0
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d02b      	beq.n	80031ce <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	fb02 f303 	mul.w	r3, r2, r3
 8003180:	4618      	mov	r0, r3
 8003182:	f001 ffc1 	bl	8005108 <pvPortMalloc>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d011      	beq.n	80031b8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	e008      	b.n	80031ac <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	3301      	adds	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3f1      	bcc.n	800319a <osPoolCreate+0x72>
 80031b6:	e00f      	b.n	80031d8 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4618      	mov	r0, r3
 80031be:	f002 f86f 	bl	80052a0 <vPortFree>
        vPortFree(thePool);
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f002 f86c 	bl	80052a0 <vPortFree>
        thePool = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	e004      	b.n	80031d8 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f002 f866 	bl	80052a0 <vPortFree>
      thePool = NULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80031d8:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b08a      	sub	sp, #40	; 0x28
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 80031f2:	f7ff ff45 	bl	8003080 <inHandlerMode>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00e      	beq.n	800321a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031fc:	f3ef 8211 	mrs	r2, BASEPRI
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	617a      	str	r2, [r7, #20]
 8003212:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003214:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	e001      	b.n	800321e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800321a:	f001 fe53 	bl	8004ec4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	e029      	b.n	8003278 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6892      	ldr	r2, [r2, #8]
 8003230:	fbb3 f1f2 	udiv	r1, r3, r2
 8003234:	fb01 f202 	mul.w	r2, r1, r2
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d113      	bne.n	8003272 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4413      	add	r3, r2
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4619      	mov	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	440b      	add	r3, r1
 8003268:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	611a      	str	r2, [r3, #16]
      break;
 8003270:	e007      	b.n	8003282 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	429a      	cmp	r2, r3
 8003280:	d3d0      	bcc.n	8003224 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8003282:	f7ff fefd 	bl	8003080 <inHandlerMode>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003296:	e001      	b.n	800329c <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8003298:	f001 fe44 	bl	8004f24 <vPortExitCritical>
  }
  
  return p;
 800329c:	6a3b      	ldr	r3, [r7, #32]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3728      	adds	r7, #40	; 0x28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <osPoolFree+0x14>
    return osErrorParameter;
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	e030      	b.n	800331c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <osPoolFree+0x1e>
    return osErrorParameter;
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	e02b      	b.n	800331c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d201      	bcs.n	80032d2 <osPoolFree+0x2c>
    return osErrorParameter;
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	e024      	b.n	800331c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80032e6:	fb01 f202 	mul.w	r2, r1, r2
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <osPoolFree+0x4e>
    return osErrorParameter;
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	e013      	b.n	800331c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	429a      	cmp	r2, r3
 8003308:	d301      	bcc.n	800330e <osPoolFree+0x68>
    return osErrorParameter;
 800330a:	2380      	movs	r3, #128	; 0x80
 800330c:	e006      	b.n	800331c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	4619      	mov	r1, r3
 800333e:	f000 f9d5 	bl	80036ec <xQueueGenericCreate>
 8003342:	4603      	mov	r3, r0
#endif
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <osMessagePut+0x1e>
    ticks = 1;
 8003366:	2301      	movs	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800336a:	f7ff fe89 	bl	8003080 <inHandlerMode>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d018      	beq.n	80033a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003374:	f107 0210 	add.w	r2, r7, #16
 8003378:	f107 0108 	add.w	r1, r7, #8
 800337c:	2300      	movs	r3, #0
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fb08 	bl	8003994 <xQueueGenericSendFromISR>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d001      	beq.n	800338e <osMessagePut+0x42>
      return osErrorOS;
 800338a:	23ff      	movs	r3, #255	; 0xff
 800338c:	e018      	b.n	80033c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d014      	beq.n	80033be <osMessagePut+0x72>
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <osMessagePut+0x7c>)
 8003396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	e00b      	b.n	80033be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80033a6:	f107 0108 	add.w	r1, r7, #8
 80033aa:	2300      	movs	r3, #0
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f9f2 	bl	8003798 <xQueueGenericSend>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d001      	beq.n	80033be <osMessagePut+0x72>
      return osErrorOS;
 80033ba:	23ff      	movs	r3, #255	; 0xff
 80033bc:	e000      	b.n	80033c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	e000ed04 	.word	0xe000ed04

080033cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b08b      	sub	sp, #44	; 0x2c
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	617b      	str	r3, [r7, #20]
    return event;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	461c      	mov	r4, r3
 80033ee:	f107 0314 	add.w	r3, r7, #20
 80033f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80033f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033fa:	e054      	b.n	80034a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d103      	bne.n	8003414 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	e009      	b.n	8003428 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <osMessageGet+0x5c>
      ticks = 1;
 8003424:	2301      	movs	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003428:	f7ff fe2a 	bl	8003080 <inHandlerMode>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01c      	beq.n	800346c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003432:	f107 0220 	add.w	r2, r7, #32
 8003436:	f107 0314 	add.w	r3, r7, #20
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	68b8      	ldr	r0, [r7, #8]
 8003440:	f000 fc24 	bl	8003c8c <xQueueReceiveFromISR>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800344a:	2310      	movs	r3, #16
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	e001      	b.n	8003454 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01d      	beq.n	8003496 <osMessageGet+0xca>
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <osMessageGet+0xe4>)
 800345c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	e014      	b.n	8003496 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	3304      	adds	r3, #4
 8003472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003474:	4619      	mov	r1, r3
 8003476:	68b8      	ldr	r0, [r7, #8]
 8003478:	f000 fb28 	bl	8003acc <xQueueReceive>
 800347c:	4603      	mov	r3, r0
 800347e:	2b01      	cmp	r3, #1
 8003480:	d102      	bne.n	8003488 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003482:	2310      	movs	r3, #16
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e006      	b.n	8003496 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <osMessageGet+0xc6>
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <osMessageGet+0xc8>
 8003492:	2340      	movs	r3, #64	; 0x40
 8003494:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	461c      	mov	r4, r3
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	372c      	adds	r7, #44	; 0x2c
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd90      	pop	{r4, r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f103 0208 	add.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f103 0208 	add.w	r2, r3, #8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f103 0208 	add.w	r2, r3, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d103      	bne.n	8003576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e00c      	b.n	8003590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3308      	adds	r3, #8
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e002      	b.n	8003584 <vListInsert+0x2e>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	d2f6      	bcs.n	800357e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6892      	ldr	r2, [r2, #8]
 80035de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6852      	ldr	r2, [r2, #4]
 80035e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d103      	bne.n	80035fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1e5a      	subs	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueGenericReset+0x2a>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	60bb      	str	r3, [r7, #8]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003646:	f001 fc3d 	bl	8004ec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	441a      	add	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	3b01      	subs	r3, #1
 8003678:	68f9      	ldr	r1, [r7, #12]
 800367a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	441a      	add	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	22ff      	movs	r2, #255	; 0xff
 800368a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	22ff      	movs	r2, #255	; 0xff
 8003692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d114      	bne.n	80036c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01a      	beq.n	80036da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3310      	adds	r3, #16
 80036a8:	4618      	mov	r0, r3
 80036aa:	f001 f835 	bl	8004718 <xTaskRemoveFromEventList>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d012      	beq.n	80036da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036b4:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <xQueueGenericReset+0xcc>)
 80036b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	e009      	b.n	80036da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3310      	adds	r3, #16
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fef2 	bl	80034b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3324      	adds	r3, #36	; 0x24
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff feed 	bl	80034b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036da:	f001 fc23 	bl	8004f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036de:	2301      	movs	r3, #1
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	613b      	str	r3, [r7, #16]
}
 8003712:	bf00      	nop
 8003714:	e7fe      	b.n	8003714 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	3348      	adds	r3, #72	; 0x48
 8003724:	4618      	mov	r0, r3
 8003726:	f001 fcef 	bl	8005108 <pvPortMalloc>
 800372a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3348      	adds	r3, #72	; 0x48
 800373a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800373c:	79fa      	ldrb	r2, [r7, #7]
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	4613      	mov	r3, r2
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f805 	bl	8003758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800374e:	69bb      	ldr	r3, [r7, #24]
	}
 8003750:	4618      	mov	r0, r3
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e002      	b.n	800377a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003786:	2101      	movs	r1, #1
 8003788:	69b8      	ldr	r0, [r7, #24]
 800378a:	f7ff ff47 	bl	800361c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08e      	sub	sp, #56	; 0x38
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xQueueGenericSend+0x32>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <xQueueGenericSend+0x40>
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <xQueueGenericSend+0x44>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <xQueueGenericSend+0x46>
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <xQueueGenericSend+0x60>
	__asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037f4:	bf00      	nop
 80037f6:	e7fe      	b.n	80037f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d103      	bne.n	8003806 <xQueueGenericSend+0x6e>
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <xQueueGenericSend+0x72>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <xQueueGenericSend+0x74>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xQueueGenericSend+0x8e>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	623b      	str	r3, [r7, #32]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003826:	f001 f919 	bl	8004a5c <xTaskGetSchedulerState>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <xQueueGenericSend+0x9e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <xQueueGenericSend+0xa2>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <xQueueGenericSend+0xa4>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <xQueueGenericSend+0xbe>
	__asm volatile
 8003840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003844:	f383 8811 	msr	BASEPRI, r3
 8003848:	f3bf 8f6f 	isb	sy
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	61fb      	str	r3, [r7, #28]
}
 8003852:	bf00      	nop
 8003854:	e7fe      	b.n	8003854 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003856:	f001 fb35 	bl	8004ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <xQueueGenericSend+0xd4>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b02      	cmp	r3, #2
 800386a:	d129      	bne.n	80038c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003872:	f000 fa8b 	bl	8003d8c <prvCopyDataToQueue>
 8003876:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	3324      	adds	r3, #36	; 0x24
 8003884:	4618      	mov	r0, r3
 8003886:	f000 ff47 	bl	8004718 <xTaskRemoveFromEventList>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003890:	4b3f      	ldr	r3, [pc, #252]	; (8003990 <xQueueGenericSend+0x1f8>)
 8003892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	e00a      	b.n	80038b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <xQueueGenericSend+0x1f8>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038b8:	f001 fb34 	bl	8004f24 <vPortExitCritical>
				return pdPASS;
 80038bc:	2301      	movs	r3, #1
 80038be:	e063      	b.n	8003988 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038c6:	f001 fb2d 	bl	8004f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e05c      	b.n	8003988 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 ff7f 	bl	80047dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038de:	2301      	movs	r3, #1
 80038e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038e2:	f001 fb1f 	bl	8004f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038e6:	f000 fd2f 	bl	8004348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ea:	f001 faeb 	bl	8004ec4 <vPortEnterCritical>
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d103      	bne.n	8003904 <xQueueGenericSend+0x16c>
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800390a:	b25b      	sxtb	r3, r3
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d103      	bne.n	800391a <xQueueGenericSend+0x182>
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800391a:	f001 fb03 	bl	8004f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800391e:	1d3a      	adds	r2, r7, #4
 8003920:	f107 0314 	add.w	r3, r7, #20
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f000 ff6e 	bl	8004808 <xTaskCheckForTimeOut>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d124      	bne.n	800397c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003934:	f000 fb22 	bl	8003f7c <prvIsQueueFull>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d018      	beq.n	8003970 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	3310      	adds	r3, #16
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fec2 	bl	80046d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800394c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800394e:	f000 faad 	bl	8003eac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003952:	f000 fd07 	bl	8004364 <xTaskResumeAll>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f af7c 	bne.w	8003856 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <xQueueGenericSend+0x1f8>)
 8003960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	e772      	b.n	8003856 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003972:	f000 fa9b 	bl	8003eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003976:	f000 fcf5 	bl	8004364 <xTaskResumeAll>
 800397a:	e76c      	b.n	8003856 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800397c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800397e:	f000 fa95 	bl	8003eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003982:	f000 fcef 	bl	8004364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003986:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003988:	4618      	mov	r0, r3
 800398a:	3738      	adds	r7, #56	; 0x38
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b090      	sub	sp, #64	; 0x40
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <xQueueGenericSendFromISR+0x3c>
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <xQueueGenericSendFromISR+0x40>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <xQueueGenericSendFromISR+0x42>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039ec:	bf00      	nop
 80039ee:	e7fe      	b.n	80039ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d103      	bne.n	80039fe <xQueueGenericSendFromISR+0x6a>
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <xQueueGenericSendFromISR+0x6e>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <xQueueGenericSendFromISR+0x70>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	623b      	str	r3, [r7, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a1e:	f001 fb33 	bl	8005088 <vPortValidateInterruptPriority>
	__asm volatile
 8003a22:	f3ef 8211 	mrs	r2, BASEPRI
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	61fa      	str	r2, [r7, #28]
 8003a38:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <xQueueGenericSendFromISR+0xbc>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d12f      	bne.n	8003ab0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a66:	f000 f991 	bl	8003d8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d112      	bne.n	8003a9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d016      	beq.n	8003aaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fe49 	bl	8004718 <xTaskRemoveFromEventList>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	e007      	b.n	8003aaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	b25a      	sxtb	r2, r3
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003aae:	e001      	b.n	8003ab4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f383 8811 	msr	BASEPRI, r3
}
 8003abe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3740      	adds	r7, #64	; 0x40
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <xQueueReceive+0x30>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	623b      	str	r3, [r7, #32]
}
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <xQueueReceive+0x3e>
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <xQueueReceive+0x42>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <xQueueReceive+0x44>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xQueueReceive+0x5e>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	61fb      	str	r3, [r7, #28]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b2a:	f000 ff97 	bl	8004a5c <xTaskGetSchedulerState>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <xQueueReceive+0x6e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <xQueueReceive+0x72>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e000      	b.n	8003b40 <xQueueReceive+0x74>
 8003b3e:	2300      	movs	r3, #0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <xQueueReceive+0x8e>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	61bb      	str	r3, [r7, #24]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b5a:	f001 f9b3 	bl	8004ec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01f      	beq.n	8003baa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b6e:	f000 f977 	bl	8003e60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1e5a      	subs	r2, r3, #1
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00f      	beq.n	8003ba2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	3310      	adds	r3, #16
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fdc6 	bl	8004718 <xTaskRemoveFromEventList>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <xQueueReceive+0x1bc>)
 8003b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ba2:	f001 f9bf 	bl	8004f24 <vPortExitCritical>
				return pdPASS;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e069      	b.n	8003c7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d103      	bne.n	8003bb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bb0:	f001 f9b8 	bl	8004f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e062      	b.n	8003c7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bbe:	f107 0310 	add.w	r3, r7, #16
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fe0a 	bl	80047dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bcc:	f001 f9aa 	bl	8004f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bd0:	f000 fbba 	bl	8004348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bd4:	f001 f976 	bl	8004ec4 <vPortEnterCritical>
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d103      	bne.n	8003bee <xQueueReceive+0x122>
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bf4:	b25b      	sxtb	r3, r3
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d103      	bne.n	8003c04 <xQueueReceive+0x138>
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c04:	f001 f98e 	bl	8004f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c08:	1d3a      	adds	r2, r7, #4
 8003c0a:	f107 0310 	add.w	r3, r7, #16
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fdf9 	bl	8004808 <xTaskCheckForTimeOut>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d123      	bne.n	8003c64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c1e:	f000 f997 	bl	8003f50 <prvIsQueueEmpty>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d017      	beq.n	8003c58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fd4d 	bl	80046d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c38:	f000 f938 	bl	8003eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c3c:	f000 fb92 	bl	8004364 <xTaskResumeAll>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d189      	bne.n	8003b5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <xQueueReceive+0x1bc>)
 8003c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	e780      	b.n	8003b5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c5a:	f000 f927 	bl	8003eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c5e:	f000 fb81 	bl	8004364 <xTaskResumeAll>
 8003c62:	e77a      	b.n	8003b5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c66:	f000 f921 	bl	8003eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6a:	f000 fb7b 	bl	8004364 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c70:	f000 f96e 	bl	8003f50 <prvIsQueueEmpty>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f43f af6f 	beq.w	8003b5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3730      	adds	r7, #48	; 0x30
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	e000ed04 	.word	0xe000ed04

08003c8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08e      	sub	sp, #56	; 0x38
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	623b      	str	r3, [r7, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <xQueueReceiveFromISR+0x3a>
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <xQueueReceiveFromISR+0x3e>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <xQueueReceiveFromISR+0x40>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	61fb      	str	r3, [r7, #28]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ce6:	f001 f9cf 	bl	8005088 <vPortValidateInterruptPriority>
	__asm volatile
 8003cea:	f3ef 8211 	mrs	r2, BASEPRI
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	61ba      	str	r2, [r7, #24]
 8003d00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003d02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d02f      	beq.n	8003d72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d20:	f000 f89e 	bl	8003e60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	1e5a      	subs	r2, r3, #1
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003d2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d112      	bne.n	8003d5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d016      	beq.n	8003d6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	3310      	adds	r3, #16
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fce8 	bl	8004718 <xTaskRemoveFromEventList>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00e      	beq.n	8003d6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e007      	b.n	8003d6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d60:	3301      	adds	r3, #1
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	b25a      	sxtb	r2, r3
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d70:	e001      	b.n	8003d76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f383 8811 	msr	BASEPRI, r3
}
 8003d80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3738      	adds	r7, #56	; 0x38
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d14d      	bne.n	8003e4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fe6e 	bl	8004a98 <xTaskPriorityDisinherit>
 8003dbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	e043      	b.n	8003e4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d119      	bne.n	8003e00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6858      	ldr	r0, [r3, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	f001 fe46 	bl	8005a68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d32b      	bcc.n	8003e4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	e026      	b.n	8003e4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68d8      	ldr	r0, [r3, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	f001 fe2c 	bl	8005a68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	425b      	negs	r3, r3
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d207      	bcs.n	8003e3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	425b      	negs	r3, r3
 8003e36:	441a      	add	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d105      	bne.n	8003e4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e56:	697b      	ldr	r3, [r7, #20]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	441a      	add	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d303      	bcc.n	8003e94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68d9      	ldr	r1, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6838      	ldr	r0, [r7, #0]
 8003ea0:	f001 fde2 	bl	8005a68 <memcpy>
	}
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003eb4:	f001 f806 	bl	8004ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ebe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ec0:	e011      	b.n	8003ee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d012      	beq.n	8003ef0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3324      	adds	r3, #36	; 0x24
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fc22 	bl	8004718 <xTaskRemoveFromEventList>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eda:	f000 fcf7 	bl	80048cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	dce9      	bgt.n	8003ec2 <prvUnlockQueue+0x16>
 8003eee:	e000      	b.n	8003ef2 <prvUnlockQueue+0x46>
					break;
 8003ef0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	22ff      	movs	r2, #255	; 0xff
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003efa:	f001 f813 	bl	8004f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003efe:	f000 ffe1 	bl	8004ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f0a:	e011      	b.n	8003f30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d012      	beq.n	8003f3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3310      	adds	r3, #16
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fbfd 	bl	8004718 <xTaskRemoveFromEventList>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f24:	f000 fcd2 	bl	80048cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f28:	7bbb      	ldrb	r3, [r7, #14]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	dce9      	bgt.n	8003f0c <prvUnlockQueue+0x60>
 8003f38:	e000      	b.n	8003f3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	22ff      	movs	r2, #255	; 0xff
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f44:	f000 ffee 	bl	8004f24 <vPortExitCritical>
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f58:	f000 ffb4 	bl	8004ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e001      	b.n	8003f6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f000 ffd9 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f84:	f000 ff9e 	bl	8004ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d102      	bne.n	8003f9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e001      	b.n	8003f9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f9e:	f000 ffc1 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08c      	sub	sp, #48	; 0x30
 8003fb0:	af04      	add	r7, sp, #16
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 f8a1 	bl	8005108 <pvPortMalloc>
 8003fc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00e      	beq.n	8003fec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003fce:	20a0      	movs	r0, #160	; 0xa0
 8003fd0:	f001 f89a 	bl	8005108 <pvPortMalloc>
 8003fd4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fe2:	e005      	b.n	8003ff0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fe4:	6978      	ldr	r0, [r7, #20]
 8003fe6:	f001 f95b 	bl	80052a0 <vPortFree>
 8003fea:	e001      	b.n	8003ff0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d013      	beq.n	800401e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	9303      	str	r3, [sp, #12]
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	9302      	str	r3, [sp, #8]
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f80f 	bl	8004030 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004012:	69f8      	ldr	r0, [r7, #28]
 8004014:	f000 f8aa 	bl	800416c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004018:	2301      	movs	r3, #1
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e002      	b.n	8004024 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
 8004022:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004024:	69bb      	ldr	r3, [r7, #24]
	}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004048:	3b01      	subs	r3, #1
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	f023 0307 	bic.w	r3, r3, #7
 8004056:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	617b      	str	r3, [r7, #20]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01f      	beq.n	80040be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e012      	b.n	80040aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	7819      	ldrb	r1, [r3, #0]
 800408c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	3334      	adds	r3, #52	; 0x34
 8004094:	460a      	mov	r2, r1
 8004096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	3301      	adds	r3, #1
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d9e9      	bls.n	8004084 <prvInitialiseNewTask+0x54>
 80040b0:	e000      	b.n	80040b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80040b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040bc:	e003      	b.n	80040c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d901      	bls.n	80040d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040cc:	2306      	movs	r3, #6
 80040ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	2200      	movs	r2, #0
 80040e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e4:	3304      	adds	r3, #4
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fa04 	bl	80034f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	3318      	adds	r3, #24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff f9ff 	bl	80034f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	f1c3 0207 	rsb	r2, r3, #7
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	2200      	movs	r2, #0
 8004110:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	2200      	movs	r2, #0
 8004118:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	334c      	adds	r3, #76	; 0x4c
 8004120:	224c      	movs	r2, #76	; 0x4c
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fbcf 	bl	80058c8 <memset>
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <prvInitialiseNewTask+0x130>)
 800412e:	651a      	str	r2, [r3, #80]	; 0x50
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	4a0c      	ldr	r2, [pc, #48]	; (8004164 <prvInitialiseNewTask+0x134>)
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	4a0b      	ldr	r2, [pc, #44]	; (8004168 <prvInitialiseNewTask+0x138>)
 800413a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	69b8      	ldr	r0, [r7, #24]
 8004142:	f000 fd95 	bl	8004c70 <pxPortInitialiseStack>
 8004146:	4602      	mov	r2, r0
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004156:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004158:	bf00      	nop
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000e88 	.word	0x20000e88
 8004164:	20000ef0 	.word	0x20000ef0
 8004168:	20000f58 	.word	0x20000f58

0800416c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004174:	f000 fea6 	bl	8004ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <prvAddNewTaskToReadyList+0xb8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3301      	adds	r3, #1
 800417e:	4a29      	ldr	r2, [pc, #164]	; (8004224 <prvAddNewTaskToReadyList+0xb8>)
 8004180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <prvAddNewTaskToReadyList+0xbc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800418a:	4a27      	ldr	r2, [pc, #156]	; (8004228 <prvAddNewTaskToReadyList+0xbc>)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004190:	4b24      	ldr	r3, [pc, #144]	; (8004224 <prvAddNewTaskToReadyList+0xb8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d110      	bne.n	80041ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004198:	f000 fbbc 	bl	8004914 <prvInitialiseTaskLists>
 800419c:	e00d      	b.n	80041ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800419e:	4b23      	ldr	r3, [pc, #140]	; (800422c <prvAddNewTaskToReadyList+0xc0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <prvAddNewTaskToReadyList+0xbc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d802      	bhi.n	80041ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041b4:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <prvAddNewTaskToReadyList+0xbc>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <prvAddNewTaskToReadyList+0xc4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3301      	adds	r3, #1
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <prvAddNewTaskToReadyList+0xc4>)
 80041c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	2201      	movs	r2, #1
 80041ca:	409a      	lsls	r2, r3
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <prvAddNewTaskToReadyList+0xc8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	4a18      	ldr	r2, [pc, #96]	; (8004234 <prvAddNewTaskToReadyList+0xc8>)
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4a15      	ldr	r2, [pc, #84]	; (8004238 <prvAddNewTaskToReadyList+0xcc>)
 80041e4:	441a      	add	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f7ff f98e 	bl	800350e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041f2:	f000 fe97 	bl	8004f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <prvAddNewTaskToReadyList+0xc0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00e      	beq.n	800421c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <prvAddNewTaskToReadyList+0xbc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	429a      	cmp	r2, r3
 800420a:	d207      	bcs.n	800421c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <prvAddNewTaskToReadyList+0xd0>)
 800420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000234 	.word	0x20000234
 8004228:	20000134 	.word	0x20000134
 800422c:	20000240 	.word	0x20000240
 8004230:	20000250 	.word	0x20000250
 8004234:	2000023c 	.word	0x2000023c
 8004238:	20000138 	.word	0x20000138
 800423c:	e000ed04 	.word	0xe000ed04

08004240 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d017      	beq.n	8004282 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004252:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <vTaskDelay+0x60>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <vTaskDelay+0x30>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	60bb      	str	r3, [r7, #8]
}
 800426c:	bf00      	nop
 800426e:	e7fe      	b.n	800426e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004270:	f000 f86a 	bl	8004348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004274:	2100      	movs	r1, #0
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fc94 	bl	8004ba4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800427c:	f000 f872 	bl	8004364 <xTaskResumeAll>
 8004280:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <vTaskDelay+0x64>)
 800428a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	2000025c 	.word	0x2000025c
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80042ae:	4b1e      	ldr	r3, [pc, #120]	; (8004328 <vTaskStartScheduler+0x80>)
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	2300      	movs	r3, #0
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	2300      	movs	r3, #0
 80042b8:	2280      	movs	r2, #128	; 0x80
 80042ba:	491c      	ldr	r1, [pc, #112]	; (800432c <vTaskStartScheduler+0x84>)
 80042bc:	481c      	ldr	r0, [pc, #112]	; (8004330 <vTaskStartScheduler+0x88>)
 80042be:	f7ff fe75 	bl	8003fac <xTaskCreate>
 80042c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d11b      	bne.n	8004302 <vTaskStartScheduler+0x5a>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
}
 80042dc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <vTaskStartScheduler+0x8c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	334c      	adds	r3, #76	; 0x4c
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <vTaskStartScheduler+0x90>)
 80042e6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042e8:	4b14      	ldr	r3, [pc, #80]	; (800433c <vTaskStartScheduler+0x94>)
 80042ea:	f04f 32ff 	mov.w	r2, #4294967295
 80042ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042f0:	4b13      	ldr	r3, [pc, #76]	; (8004340 <vTaskStartScheduler+0x98>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <vTaskStartScheduler+0x9c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042fc:	f000 fd40 	bl	8004d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004300:	e00e      	b.n	8004320 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d10a      	bne.n	8004320 <vTaskStartScheduler+0x78>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	607b      	str	r3, [r7, #4]
}
 800431c:	bf00      	nop
 800431e:	e7fe      	b.n	800431e <vTaskStartScheduler+0x76>
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000258 	.word	0x20000258
 800432c:	08006528 	.word	0x08006528
 8004330:	080048e5 	.word	0x080048e5
 8004334:	20000134 	.word	0x20000134
 8004338:	20000068 	.word	0x20000068
 800433c:	20000254 	.word	0x20000254
 8004340:	20000240 	.word	0x20000240
 8004344:	20000238 	.word	0x20000238

08004348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <vTaskSuspendAll+0x18>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3301      	adds	r3, #1
 8004352:	4a03      	ldr	r2, [pc, #12]	; (8004360 <vTaskSuspendAll+0x18>)
 8004354:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	2000025c 	.word	0x2000025c

08004364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004372:	4b41      	ldr	r3, [pc, #260]	; (8004478 <xTaskResumeAll+0x114>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <xTaskResumeAll+0x2c>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	603b      	str	r3, [r7, #0]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004390:	f000 fd98 	bl	8004ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004394:	4b38      	ldr	r3, [pc, #224]	; (8004478 <xTaskResumeAll+0x114>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	4a37      	ldr	r2, [pc, #220]	; (8004478 <xTaskResumeAll+0x114>)
 800439c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <xTaskResumeAll+0x114>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d161      	bne.n	800446a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043a6:	4b35      	ldr	r3, [pc, #212]	; (800447c <xTaskResumeAll+0x118>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d05d      	beq.n	800446a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ae:	e02e      	b.n	800440e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b0:	4b33      	ldr	r3, [pc, #204]	; (8004480 <xTaskResumeAll+0x11c>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3318      	adds	r3, #24
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff f903 	bl	80035c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff f8fe 	bl	80035c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	2201      	movs	r2, #1
 80043d2:	409a      	lsls	r2, r3
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <xTaskResumeAll+0x120>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4313      	orrs	r3, r2
 80043da:	4a2a      	ldr	r2, [pc, #168]	; (8004484 <xTaskResumeAll+0x120>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4a27      	ldr	r2, [pc, #156]	; (8004488 <xTaskResumeAll+0x124>)
 80043ec:	441a      	add	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7ff f88a 	bl	800350e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <xTaskResumeAll+0x128>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004408:	4b21      	ldr	r3, [pc, #132]	; (8004490 <xTaskResumeAll+0x12c>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800440e:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <xTaskResumeAll+0x11c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1cc      	bne.n	80043b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800441c:	f000 fafe 	bl	8004a1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004420:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <xTaskResumeAll+0x130>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d010      	beq.n	800444e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800442c:	f000 f836 	bl	800449c <xTaskIncrementTick>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004436:	4b16      	ldr	r3, [pc, #88]	; (8004490 <xTaskResumeAll+0x12c>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f1      	bne.n	800442c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <xTaskResumeAll+0x130>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800444e:	4b10      	ldr	r3, [pc, #64]	; (8004490 <xTaskResumeAll+0x12c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <xTaskResumeAll+0x134>)
 800445c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800446a:	f000 fd5b 	bl	8004f24 <vPortExitCritical>

	return xAlreadyYielded;
 800446e:	68bb      	ldr	r3, [r7, #8]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	2000025c 	.word	0x2000025c
 800447c:	20000234 	.word	0x20000234
 8004480:	200001f4 	.word	0x200001f4
 8004484:	2000023c 	.word	0x2000023c
 8004488:	20000138 	.word	0x20000138
 800448c:	20000134 	.word	0x20000134
 8004490:	20000248 	.word	0x20000248
 8004494:	20000244 	.word	0x20000244
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a6:	4b4e      	ldr	r3, [pc, #312]	; (80045e0 <xTaskIncrementTick+0x144>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 808e 	bne.w	80045cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044b0:	4b4c      	ldr	r3, [pc, #304]	; (80045e4 <xTaskIncrementTick+0x148>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3301      	adds	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044b8:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <xTaskIncrementTick+0x148>)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d120      	bne.n	8004506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80044c4:	4b48      	ldr	r3, [pc, #288]	; (80045e8 <xTaskIncrementTick+0x14c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	603b      	str	r3, [r7, #0]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <xTaskIncrementTick+0x46>
 80044e4:	4b40      	ldr	r3, [pc, #256]	; (80045e8 <xTaskIncrementTick+0x14c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	4b40      	ldr	r3, [pc, #256]	; (80045ec <xTaskIncrementTick+0x150>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a3e      	ldr	r2, [pc, #248]	; (80045e8 <xTaskIncrementTick+0x14c>)
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4a3e      	ldr	r2, [pc, #248]	; (80045ec <xTaskIncrementTick+0x150>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <xTaskIncrementTick+0x154>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	4a3c      	ldr	r2, [pc, #240]	; (80045f0 <xTaskIncrementTick+0x154>)
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	f000 fa8b 	bl	8004a1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004506:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <xTaskIncrementTick+0x158>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	429a      	cmp	r2, r3
 800450e:	d348      	bcc.n	80045a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004510:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <xTaskIncrementTick+0x14c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d104      	bne.n	8004524 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451a:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <xTaskIncrementTick+0x158>)
 800451c:	f04f 32ff 	mov.w	r2, #4294967295
 8004520:	601a      	str	r2, [r3, #0]
					break;
 8004522:	e03e      	b.n	80045a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004524:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <xTaskIncrementTick+0x14c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	429a      	cmp	r2, r3
 800453a:	d203      	bcs.n	8004544 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800453c:	4a2d      	ldr	r2, [pc, #180]	; (80045f4 <xTaskIncrementTick+0x158>)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004542:	e02e      	b.n	80045a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	3304      	adds	r3, #4
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff f83d 	bl	80035c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	d004      	beq.n	8004560 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3318      	adds	r3, #24
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff f834 	bl	80035c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	2201      	movs	r2, #1
 8004566:	409a      	lsls	r2, r3
 8004568:	4b23      	ldr	r3, [pc, #140]	; (80045f8 <xTaskIncrementTick+0x15c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4313      	orrs	r3, r2
 800456e:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <xTaskIncrementTick+0x15c>)
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <xTaskIncrementTick+0x160>)
 8004580:	441a      	add	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3304      	adds	r3, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f7fe ffc0 	bl	800350e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <xTaskIncrementTick+0x164>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	429a      	cmp	r2, r3
 800459a:	d3b9      	bcc.n	8004510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a0:	e7b6      	b.n	8004510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045a2:	4b17      	ldr	r3, [pc, #92]	; (8004600 <xTaskIncrementTick+0x164>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	4914      	ldr	r1, [pc, #80]	; (80045fc <xTaskIncrementTick+0x160>)
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d901      	bls.n	80045be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <xTaskIncrementTick+0x168>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e004      	b.n	80045d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <xTaskIncrementTick+0x16c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4a0d      	ldr	r2, [pc, #52]	; (8004608 <xTaskIncrementTick+0x16c>)
 80045d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045d6:	697b      	ldr	r3, [r7, #20]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	2000025c 	.word	0x2000025c
 80045e4:	20000238 	.word	0x20000238
 80045e8:	200001ec 	.word	0x200001ec
 80045ec:	200001f0 	.word	0x200001f0
 80045f0:	2000024c 	.word	0x2000024c
 80045f4:	20000254 	.word	0x20000254
 80045f8:	2000023c 	.word	0x2000023c
 80045fc:	20000138 	.word	0x20000138
 8004600:	20000134 	.word	0x20000134
 8004604:	20000248 	.word	0x20000248
 8004608:	20000244 	.word	0x20000244

0800460c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004612:	4b29      	ldr	r3, [pc, #164]	; (80046b8 <vTaskSwitchContext+0xac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800461a:	4b28      	ldr	r3, [pc, #160]	; (80046bc <vTaskSwitchContext+0xb0>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004620:	e044      	b.n	80046ac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004622:	4b26      	ldr	r3, [pc, #152]	; (80046bc <vTaskSwitchContext+0xb0>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004628:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <vTaskSwitchContext+0xb4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	fab3 f383 	clz	r3, r3
 8004634:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004636:	7afb      	ldrb	r3, [r7, #11]
 8004638:	f1c3 031f 	rsb	r3, r3, #31
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	4921      	ldr	r1, [pc, #132]	; (80046c4 <vTaskSwitchContext+0xb8>)
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	607b      	str	r3, [r7, #4]
}
 8004664:	bf00      	nop
 8004666:	e7fe      	b.n	8004666 <vTaskSwitchContext+0x5a>
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4a14      	ldr	r2, [pc, #80]	; (80046c4 <vTaskSwitchContext+0xb8>)
 8004674:	4413      	add	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3308      	adds	r3, #8
 800468a:	429a      	cmp	r2, r3
 800468c:	d104      	bne.n	8004698 <vTaskSwitchContext+0x8c>
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <vTaskSwitchContext+0xbc>)
 80046a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <vTaskSwitchContext+0xbc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	334c      	adds	r3, #76	; 0x4c
 80046a8:	4a08      	ldr	r2, [pc, #32]	; (80046cc <vTaskSwitchContext+0xc0>)
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	2000025c 	.word	0x2000025c
 80046bc:	20000248 	.word	0x20000248
 80046c0:	2000023c 	.word	0x2000023c
 80046c4:	20000138 	.word	0x20000138
 80046c8:	20000134 	.word	0x20000134
 80046cc:	20000068 	.word	0x20000068

080046d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10a      	bne.n	80046f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60fb      	str	r3, [r7, #12]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <vTaskPlaceOnEventList+0x44>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3318      	adds	r3, #24
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fe ff29 	bl	8003556 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004704:	2101      	movs	r1, #1
 8004706:	6838      	ldr	r0, [r7, #0]
 8004708:	f000 fa4c 	bl	8004ba4 <prvAddCurrentTaskToDelayedList>
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000134 	.word	0x20000134

08004718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60fb      	str	r3, [r7, #12]
}
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	3318      	adds	r3, #24
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe ff3d 	bl	80035c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <xTaskRemoveFromEventList+0xac>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d11c      	bne.n	8004790 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe ff34 	bl	80035c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	2201      	movs	r2, #1
 8004766:	409a      	lsls	r2, r3
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <xTaskRemoveFromEventList+0xb0>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4313      	orrs	r3, r2
 800476e:	4a16      	ldr	r2, [pc, #88]	; (80047c8 <xTaskRemoveFromEventList+0xb0>)
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4a13      	ldr	r2, [pc, #76]	; (80047cc <xTaskRemoveFromEventList+0xb4>)
 8004780:	441a      	add	r2, r3
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7fe fec0 	bl	800350e <vListInsertEnd>
 800478e:	e005      	b.n	800479c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3318      	adds	r3, #24
 8004794:	4619      	mov	r1, r3
 8004796:	480e      	ldr	r0, [pc, #56]	; (80047d0 <xTaskRemoveFromEventList+0xb8>)
 8004798:	f7fe feb9 	bl	800350e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <xTaskRemoveFromEventList+0xbc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d905      	bls.n	80047b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047ae:	4b0a      	ldr	r3, [pc, #40]	; (80047d8 <xTaskRemoveFromEventList+0xc0>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e001      	b.n	80047ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047ba:	697b      	ldr	r3, [r7, #20]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	2000025c 	.word	0x2000025c
 80047c8:	2000023c 	.word	0x2000023c
 80047cc:	20000138 	.word	0x20000138
 80047d0:	200001f4 	.word	0x200001f4
 80047d4:	20000134 	.word	0x20000134
 80047d8:	20000248 	.word	0x20000248

080047dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <vTaskInternalSetTimeOutState+0x24>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <vTaskInternalSetTimeOutState+0x28>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	605a      	str	r2, [r3, #4]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	2000024c 	.word	0x2000024c
 8004804:	20000238 	.word	0x20000238

08004808 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	613b      	str	r3, [r7, #16]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	60fb      	str	r3, [r7, #12]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800484a:	f000 fb3b 	bl	8004ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800484e:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <xTaskCheckForTimeOut+0xbc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d102      	bne.n	800486e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e023      	b.n	80048b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <xTaskCheckForTimeOut+0xc0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d007      	beq.n	800488a <xTaskCheckForTimeOut+0x82>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	429a      	cmp	r2, r3
 8004882:	d302      	bcc.n	800488a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004884:	2301      	movs	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e015      	b.n	80048b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	429a      	cmp	r2, r3
 8004892:	d20b      	bcs.n	80048ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	1ad2      	subs	r2, r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff ff9b 	bl	80047dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e004      	b.n	80048b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048b6:	f000 fb35 	bl	8004f24 <vPortExitCritical>

	return xReturn;
 80048ba:	69fb      	ldr	r3, [r7, #28]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000238 	.word	0x20000238
 80048c8:	2000024c 	.word	0x2000024c

080048cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <vTaskMissedYield+0x14>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
}
 80048d6:	bf00      	nop
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	20000248 	.word	0x20000248

080048e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048ec:	f000 f852 	bl	8004994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <prvIdleTask+0x28>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d9f9      	bls.n	80048ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <prvIdleTask+0x2c>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004908:	e7f0      	b.n	80048ec <prvIdleTask+0x8>
 800490a:	bf00      	nop
 800490c:	20000138 	.word	0x20000138
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	e00c      	b.n	800493a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4a12      	ldr	r2, [pc, #72]	; (8004974 <prvInitialiseTaskLists+0x60>)
 800492c:	4413      	add	r3, r2
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fdc0 	bl	80034b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3301      	adds	r3, #1
 8004938:	607b      	str	r3, [r7, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b06      	cmp	r3, #6
 800493e:	d9ef      	bls.n	8004920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004940:	480d      	ldr	r0, [pc, #52]	; (8004978 <prvInitialiseTaskLists+0x64>)
 8004942:	f7fe fdb7 	bl	80034b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004946:	480d      	ldr	r0, [pc, #52]	; (800497c <prvInitialiseTaskLists+0x68>)
 8004948:	f7fe fdb4 	bl	80034b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800494c:	480c      	ldr	r0, [pc, #48]	; (8004980 <prvInitialiseTaskLists+0x6c>)
 800494e:	f7fe fdb1 	bl	80034b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004952:	480c      	ldr	r0, [pc, #48]	; (8004984 <prvInitialiseTaskLists+0x70>)
 8004954:	f7fe fdae 	bl	80034b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004958:	480b      	ldr	r0, [pc, #44]	; (8004988 <prvInitialiseTaskLists+0x74>)
 800495a:	f7fe fdab 	bl	80034b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <prvInitialiseTaskLists+0x78>)
 8004960:	4a05      	ldr	r2, [pc, #20]	; (8004978 <prvInitialiseTaskLists+0x64>)
 8004962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <prvInitialiseTaskLists+0x7c>)
 8004966:	4a05      	ldr	r2, [pc, #20]	; (800497c <prvInitialiseTaskLists+0x68>)
 8004968:	601a      	str	r2, [r3, #0]
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000138 	.word	0x20000138
 8004978:	200001c4 	.word	0x200001c4
 800497c:	200001d8 	.word	0x200001d8
 8004980:	200001f4 	.word	0x200001f4
 8004984:	20000208 	.word	0x20000208
 8004988:	20000220 	.word	0x20000220
 800498c:	200001ec 	.word	0x200001ec
 8004990:	200001f0 	.word	0x200001f0

08004994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800499a:	e019      	b.n	80049d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800499c:	f000 fa92 	bl	8004ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a0:	4b10      	ldr	r3, [pc, #64]	; (80049e4 <prvCheckTasksWaitingTermination+0x50>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe fe0b 	bl	80035c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <prvCheckTasksWaitingTermination+0x54>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	4a0b      	ldr	r2, [pc, #44]	; (80049e8 <prvCheckTasksWaitingTermination+0x54>)
 80049ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049bc:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <prvCheckTasksWaitingTermination+0x58>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	4a0a      	ldr	r2, [pc, #40]	; (80049ec <prvCheckTasksWaitingTermination+0x58>)
 80049c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049c6:	f000 faad 	bl	8004f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f810 	bl	80049f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <prvCheckTasksWaitingTermination+0x58>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e1      	bne.n	800499c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000208 	.word	0x20000208
 80049e8:	20000234 	.word	0x20000234
 80049ec:	2000021c 	.word	0x2000021c

080049f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	334c      	adds	r3, #76	; 0x4c
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 ff7b 	bl	80058f8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fc4a 	bl	80052a0 <vPortFree>
			vPortFree( pxTCB );
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fc47 	bl	80052a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <prvResetNextTaskUnblockTime+0x38>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <prvResetNextTaskUnblockTime+0x3c>)
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a34:	e008      	b.n	8004a48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a36:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <prvResetNextTaskUnblockTime+0x38>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <prvResetNextTaskUnblockTime+0x3c>)
 8004a46:	6013      	str	r3, [r2, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	200001ec 	.word	0x200001ec
 8004a58:	20000254 	.word	0x20000254

08004a5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <xTaskGetSchedulerState+0x34>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	e008      	b.n	8004a82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a70:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <xTaskGetSchedulerState+0x38>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	e001      	b.n	8004a82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a82:	687b      	ldr	r3, [r7, #4]
	}
 8004a84:	4618      	mov	r0, r3
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	20000240 	.word	0x20000240
 8004a94:	2000025c 	.word	0x2000025c

08004a98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d06e      	beq.n	8004b8c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004aae:	4b3a      	ldr	r3, [pc, #232]	; (8004b98 <xTaskPriorityDisinherit+0x100>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d00a      	beq.n	8004ace <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	60fb      	str	r3, [r7, #12]
}
 8004aca:	bf00      	nop
 8004acc:	e7fe      	b.n	8004acc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60bb      	str	r3, [r7, #8]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af0:	1e5a      	subs	r2, r3, #1
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d044      	beq.n	8004b8c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d140      	bne.n	8004b8c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe fd5a 	bl	80035c8 <uxListRemove>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d115      	bne.n	8004b46 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1e:	491f      	ldr	r1, [pc, #124]	; (8004b9c <xTaskPriorityDisinherit+0x104>)
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <xTaskPriorityDisinherit+0xae>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	2201      	movs	r2, #1
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	4b18      	ldr	r3, [pc, #96]	; (8004ba0 <xTaskPriorityDisinherit+0x108>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4013      	ands	r3, r2
 8004b42:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <xTaskPriorityDisinherit+0x108>)
 8004b44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	f1c3 0207 	rsb	r2, r3, #7
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	2201      	movs	r2, #1
 8004b60:	409a      	lsls	r2, r3
 8004b62:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <xTaskPriorityDisinherit+0x108>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <xTaskPriorityDisinherit+0x108>)
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <xTaskPriorityDisinherit+0x104>)
 8004b7a:	441a      	add	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f7fe fcc3 	bl	800350e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b8c:	697b      	ldr	r3, [r7, #20]
	}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000134 	.word	0x20000134
 8004b9c:	20000138 	.word	0x20000138
 8004ba0:	2000023c 	.word	0x2000023c

08004ba4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bae:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bb4:	4b28      	ldr	r3, [pc, #160]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fd04 	bl	80035c8 <uxListRemove>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bc6:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	2201      	movs	r2, #1
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43da      	mvns	r2, r3
 8004bd4:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	4a20      	ldr	r2, [pc, #128]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d10a      	bne.n	8004bfc <prvAddCurrentTaskToDelayedList+0x58>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bec:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	481a      	ldr	r0, [pc, #104]	; (8004c60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004bf6:	f7fe fc8a 	bl	800350e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bfa:	e026      	b.n	8004c4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d209      	bcs.n	8004c28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c14:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4610      	mov	r0, r2
 8004c22:	f7fe fc98 	bl	8003556 <vListInsert>
}
 8004c26:	e010      	b.n	8004c4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c28:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f7fe fc8e 	bl	8003556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d202      	bcs.n	8004c4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c44:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6013      	str	r3, [r2, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000238 	.word	0x20000238
 8004c58:	20000134 	.word	0x20000134
 8004c5c:	2000023c 	.word	0x2000023c
 8004c60:	20000220 	.word	0x20000220
 8004c64:	200001f0 	.word	0x200001f0
 8004c68:	200001ec 	.word	0x200001ec
 8004c6c:	20000254 	.word	0x20000254

08004c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3b04      	subs	r3, #4
 8004c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b04      	subs	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f023 0201 	bic.w	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ca0:	4a0c      	ldr	r2, [pc, #48]	; (8004cd4 <pxPortInitialiseStack+0x64>)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b14      	subs	r3, #20
 8004caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b04      	subs	r3, #4
 8004cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f06f 0202 	mvn.w	r2, #2
 8004cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3b20      	subs	r3, #32
 8004cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	08004cd9 	.word	0x08004cd9

08004cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ce2:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <prvTaskExitError+0x54>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d00a      	beq.n	8004d02 <prvTaskExitError+0x2a>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <prvTaskExitError+0x28>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60bb      	str	r3, [r7, #8]
}
 8004d14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d16:	bf00      	nop
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0fc      	beq.n	8004d18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	2000000c 	.word	0x2000000c

08004d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <pxCurrentTCBConst2>)
 8004d32:	6819      	ldr	r1, [r3, #0]
 8004d34:	6808      	ldr	r0, [r1, #0]
 8004d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	f380 8809 	msr	PSP, r0
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f380 8811 	msr	BASEPRI, r0
 8004d4a:	4770      	bx	lr
 8004d4c:	f3af 8000 	nop.w

08004d50 <pxCurrentTCBConst2>:
 8004d50:	20000134 	.word	0x20000134
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop

08004d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d58:	4808      	ldr	r0, [pc, #32]	; (8004d7c <prvPortStartFirstTask+0x24>)
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f380 8808 	msr	MSP, r0
 8004d62:	f04f 0000 	mov.w	r0, #0
 8004d66:	f380 8814 	msr	CONTROL, r0
 8004d6a:	b662      	cpsie	i
 8004d6c:	b661      	cpsie	f
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	df00      	svc	0
 8004d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d7a:	bf00      	nop
 8004d7c:	e000ed08 	.word	0xe000ed08

08004d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d86:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <xPortStartScheduler+0x120>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a46      	ldr	r2, [pc, #280]	; (8004ea4 <xPortStartScheduler+0x124>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10a      	bne.n	8004da6 <xPortStartScheduler+0x26>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	613b      	str	r3, [r7, #16]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004da6:	4b3e      	ldr	r3, [pc, #248]	; (8004ea0 <xPortStartScheduler+0x120>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3f      	ldr	r2, [pc, #252]	; (8004ea8 <xPortStartScheduler+0x128>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10a      	bne.n	8004dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60fb      	str	r3, [r7, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dc6:	4b39      	ldr	r3, [pc, #228]	; (8004eac <xPortStartScheduler+0x12c>)
 8004dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	22ff      	movs	r2, #255	; 0xff
 8004dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4b31      	ldr	r3, [pc, #196]	; (8004eb0 <xPortStartScheduler+0x130>)
 8004dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df4:	e009      	b.n	8004e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004df6:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d0ef      	beq.n	8004df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e16:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f1c3 0307 	rsb	r3, r3, #7
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d00a      	beq.n	8004e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60bb      	str	r3, [r7, #8]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e38:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e42:	4b1c      	ldr	r3, [pc, #112]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e4a:	4a1a      	ldr	r2, [pc, #104]	; (8004eb4 <xPortStartScheduler+0x134>)
 8004e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a17      	ldr	r2, [pc, #92]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a14      	ldr	r2, [pc, #80]	; (8004eb8 <xPortStartScheduler+0x138>)
 8004e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e6e:	f000 f8dd 	bl	800502c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <xPortStartScheduler+0x13c>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e78:	f000 f8fc 	bl	8005074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e7c:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <xPortStartScheduler+0x140>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0f      	ldr	r2, [pc, #60]	; (8004ec0 <xPortStartScheduler+0x140>)
 8004e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e88:	f7ff ff66 	bl	8004d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e8c:	f7ff fbbe 	bl	800460c <vTaskSwitchContext>
	prvTaskExitError();
 8004e90:	f7ff ff22 	bl	8004cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	e000ed00 	.word	0xe000ed00
 8004ea4:	410fc271 	.word	0x410fc271
 8004ea8:	410fc270 	.word	0x410fc270
 8004eac:	e000e400 	.word	0xe000e400
 8004eb0:	20000260 	.word	0x20000260
 8004eb4:	20000264 	.word	0x20000264
 8004eb8:	e000ed20 	.word	0xe000ed20
 8004ebc:	2000000c 	.word	0x2000000c
 8004ec0:	e000ef34 	.word	0xe000ef34

08004ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
}
 8004edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ede:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <vPortEnterCritical+0x58>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <vPortEnterCritical+0x58>)
 8004ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <vPortEnterCritical+0x58>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10f      	bne.n	8004f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <vPortEnterCritical+0x5c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	603b      	str	r3, [r7, #0]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <vPortEnterCritical+0x4a>
	}
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	2000000c 	.word	0x2000000c
 8004f20:	e000ed04 	.word	0xe000ed04

08004f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <vPortExitCritical+0x50>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <vPortExitCritical+0x24>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	607b      	str	r3, [r7, #4]
}
 8004f44:	bf00      	nop
 8004f46:	e7fe      	b.n	8004f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <vPortExitCritical+0x50>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <vPortExitCritical+0x50>)
 8004f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <vPortExitCritical+0x50>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d105      	bne.n	8004f66 <vPortExitCritical+0x42>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f383 8811 	msr	BASEPRI, r3
}
 8004f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	2000000c 	.word	0x2000000c
	...

08004f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f80:	f3ef 8009 	mrs	r0, PSP
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <pxCurrentTCBConst>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f01e 0f10 	tst.w	lr, #16
 8004f90:	bf08      	it	eq
 8004f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9a:	6010      	str	r0, [r2, #0]
 8004f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fa4:	f380 8811 	msr	BASEPRI, r0
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f7ff fb2c 	bl	800460c <vTaskSwitchContext>
 8004fb4:	f04f 0000 	mov.w	r0, #0
 8004fb8:	f380 8811 	msr	BASEPRI, r0
 8004fbc:	bc09      	pop	{r0, r3}
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc6:	f01e 0f10 	tst.w	lr, #16
 8004fca:	bf08      	it	eq
 8004fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fd0:	f380 8809 	msr	PSP, r0
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst>:
 8004fe0:	20000134 	.word	0x20000134
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	607b      	str	r3, [r7, #4]
}
 8005000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005002:	f7ff fa4b 	bl	800449c <xTaskIncrementTick>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <xPortSysTickHandler+0x40>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	2300      	movs	r3, #0
 8005016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f383 8811 	msr	BASEPRI, r3
}
 800501e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005030:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <vPortSetupTimerInterrupt+0x38>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800503c:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <vPortSetupTimerInterrupt+0x3c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0a      	ldr	r2, [pc, #40]	; (800506c <vPortSetupTimerInterrupt+0x40>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <vPortSetupTimerInterrupt+0x44>)
 800504a:	3b01      	subs	r3, #1
 800504c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <vPortSetupTimerInterrupt+0x34>)
 8005050:	2207      	movs	r2, #7
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	e000e010 	.word	0xe000e010
 8005064:	e000e018 	.word	0xe000e018
 8005068:	20000000 	.word	0x20000000
 800506c:	10624dd3 	.word	0x10624dd3
 8005070:	e000e014 	.word	0xe000e014

08005074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005084 <vPortEnableVFP+0x10>
 8005078:	6801      	ldr	r1, [r0, #0]
 800507a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800507e:	6001      	str	r1, [r0, #0]
 8005080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005082:	bf00      	nop
 8005084:	e000ed88 	.word	0xe000ed88

08005088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800508e:	f3ef 8305 	mrs	r3, IPSR
 8005092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	d914      	bls.n	80050c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <vPortValidateInterruptPriority+0x70>)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4413      	add	r3, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050a4:	4b15      	ldr	r3, [pc, #84]	; (80050fc <vPortValidateInterruptPriority+0x74>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	7afa      	ldrb	r2, [r7, #11]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d20a      	bcs.n	80050c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
 80050c2:	e7fe      	b.n	80050c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <vPortValidateInterruptPriority+0x78>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <vPortValidateInterruptPriority+0x7c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d90a      	bls.n	80050ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	603b      	str	r3, [r7, #0]
}
 80050e6:	bf00      	nop
 80050e8:	e7fe      	b.n	80050e8 <vPortValidateInterruptPriority+0x60>
	}
 80050ea:	bf00      	nop
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	e000e3f0 	.word	0xe000e3f0
 80050fc:	20000260 	.word	0x20000260
 8005100:	e000ed0c 	.word	0xe000ed0c
 8005104:	20000264 	.word	0x20000264

08005108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005114:	f7ff f918 	bl	8004348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005118:	4b5b      	ldr	r3, [pc, #364]	; (8005288 <pvPortMalloc+0x180>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005120:	f000 f920 	bl	8005364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005124:	4b59      	ldr	r3, [pc, #356]	; (800528c <pvPortMalloc+0x184>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4013      	ands	r3, r2
 800512c:	2b00      	cmp	r3, #0
 800512e:	f040 8093 	bne.w	8005258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d01d      	beq.n	8005174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005138:	2208      	movs	r2, #8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	2b00      	cmp	r3, #0
 8005148:	d014      	beq.n	8005174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f023 0307 	bic.w	r3, r3, #7
 8005150:	3308      	adds	r3, #8
 8005152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <pvPortMalloc+0x6c>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	617b      	str	r3, [r7, #20]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d06e      	beq.n	8005258 <pvPortMalloc+0x150>
 800517a:	4b45      	ldr	r3, [pc, #276]	; (8005290 <pvPortMalloc+0x188>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	d869      	bhi.n	8005258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005184:	4b43      	ldr	r3, [pc, #268]	; (8005294 <pvPortMalloc+0x18c>)
 8005186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005188:	4b42      	ldr	r3, [pc, #264]	; (8005294 <pvPortMalloc+0x18c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800518e:	e004      	b.n	800519a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d903      	bls.n	80051ac <pvPortMalloc+0xa4>
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f1      	bne.n	8005190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051ac:	4b36      	ldr	r3, [pc, #216]	; (8005288 <pvPortMalloc+0x180>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d050      	beq.n	8005258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2208      	movs	r2, #8
 80051bc:	4413      	add	r3, r2
 80051be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	2308      	movs	r3, #8
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d91f      	bls.n	8005218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4413      	add	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <pvPortMalloc+0xf8>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	613b      	str	r3, [r7, #16]
}
 80051fc:	bf00      	nop
 80051fe:	e7fe      	b.n	80051fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	1ad2      	subs	r2, r2, r3
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005212:	69b8      	ldr	r0, [r7, #24]
 8005214:	f000 f908 	bl	8005428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <pvPortMalloc+0x188>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	4a1b      	ldr	r2, [pc, #108]	; (8005290 <pvPortMalloc+0x188>)
 8005224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005226:	4b1a      	ldr	r3, [pc, #104]	; (8005290 <pvPortMalloc+0x188>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <pvPortMalloc+0x190>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d203      	bcs.n	800523a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <pvPortMalloc+0x188>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a18      	ldr	r2, [pc, #96]	; (8005298 <pvPortMalloc+0x190>)
 8005238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <pvPortMalloc+0x184>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	431a      	orrs	r2, r3
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	2200      	movs	r2, #0
 800524c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <pvPortMalloc+0x194>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3301      	adds	r3, #1
 8005254:	4a11      	ldr	r2, [pc, #68]	; (800529c <pvPortMalloc+0x194>)
 8005256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005258:	f7ff f884 	bl	8004364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <pvPortMalloc+0x174>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	60fb      	str	r3, [r7, #12]
}
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <pvPortMalloc+0x172>
	return pvReturn;
 800527c:	69fb      	ldr	r3, [r7, #28]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3728      	adds	r7, #40	; 0x28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000e70 	.word	0x20000e70
 800528c:	20000e84 	.word	0x20000e84
 8005290:	20000e74 	.word	0x20000e74
 8005294:	20000e68 	.word	0x20000e68
 8005298:	20000e78 	.word	0x20000e78
 800529c:	20000e7c 	.word	0x20000e7c

080052a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04d      	beq.n	800534e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052b2:	2308      	movs	r3, #8
 80052b4:	425b      	negs	r3, r3
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	4413      	add	r3, r2
 80052ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	4b24      	ldr	r3, [pc, #144]	; (8005358 <vPortFree+0xb8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4013      	ands	r3, r2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <vPortFree+0x44>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	60fb      	str	r3, [r7, #12]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <vPortFree+0x62>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	60bb      	str	r3, [r7, #8]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	4b14      	ldr	r3, [pc, #80]	; (8005358 <vPortFree+0xb8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4013      	ands	r3, r2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01e      	beq.n	800534e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d11a      	bne.n	800534e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	4b0e      	ldr	r3, [pc, #56]	; (8005358 <vPortFree+0xb8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	43db      	mvns	r3, r3
 8005322:	401a      	ands	r2, r3
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005328:	f7ff f80e 	bl	8004348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	4b0a      	ldr	r3, [pc, #40]	; (800535c <vPortFree+0xbc>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4413      	add	r3, r2
 8005336:	4a09      	ldr	r2, [pc, #36]	; (800535c <vPortFree+0xbc>)
 8005338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800533a:	6938      	ldr	r0, [r7, #16]
 800533c:	f000 f874 	bl	8005428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <vPortFree+0xc0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	4a06      	ldr	r2, [pc, #24]	; (8005360 <vPortFree+0xc0>)
 8005348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800534a:	f7ff f80b 	bl	8004364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800534e:	bf00      	nop
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000e84 	.word	0x20000e84
 800535c:	20000e74 	.word	0x20000e74
 8005360:	20000e80 	.word	0x20000e80

08005364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800536a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800536e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005370:	4b27      	ldr	r3, [pc, #156]	; (8005410 <prvHeapInit+0xac>)
 8005372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00c      	beq.n	8005398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3307      	adds	r3, #7
 8005382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f023 0307 	bic.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	4a1f      	ldr	r2, [pc, #124]	; (8005410 <prvHeapInit+0xac>)
 8005394:	4413      	add	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <prvHeapInit+0xb0>)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <prvHeapInit+0xb0>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4413      	add	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053b0:	2208      	movs	r2, #8
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0307 	bic.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <prvHeapInit+0xb4>)
 80053c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053c6:	4b14      	ldr	r3, [pc, #80]	; (8005418 <prvHeapInit+0xb4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2200      	movs	r2, #0
 80053cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <prvHeapInit+0xb4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053e4:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <prvHeapInit+0xb4>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	4a0a      	ldr	r2, [pc, #40]	; (800541c <prvHeapInit+0xb8>)
 80053f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a09      	ldr	r2, [pc, #36]	; (8005420 <prvHeapInit+0xbc>)
 80053fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <prvHeapInit+0xc0>)
 80053fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	20000268 	.word	0x20000268
 8005414:	20000e68 	.word	0x20000e68
 8005418:	20000e70 	.word	0x20000e70
 800541c:	20000e78 	.word	0x20000e78
 8005420:	20000e74 	.word	0x20000e74
 8005424:	20000e84 	.word	0x20000e84

08005428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005430:	4b28      	ldr	r3, [pc, #160]	; (80054d4 <prvInsertBlockIntoFreeList+0xac>)
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e002      	b.n	800543c <prvInsertBlockIntoFreeList+0x14>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d8f7      	bhi.n	8005436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	4413      	add	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	429a      	cmp	r2, r3
 8005456:	d108      	bne.n	800546a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	441a      	add	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	441a      	add	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d118      	bne.n	80054b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d00d      	beq.n	80054a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	441a      	add	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e008      	b.n	80054b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054a6:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <prvInsertBlockIntoFreeList+0xb0>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e003      	b.n	80054b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d002      	beq.n	80054c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	20000e68 	.word	0x20000e68
 80054d8:	20000e70 	.word	0x20000e70

080054dc <std>:
 80054dc:	2300      	movs	r3, #0
 80054de:	b510      	push	{r4, lr}
 80054e0:	4604      	mov	r4, r0
 80054e2:	e9c0 3300 	strd	r3, r3, [r0]
 80054e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ea:	6083      	str	r3, [r0, #8]
 80054ec:	8181      	strh	r1, [r0, #12]
 80054ee:	6643      	str	r3, [r0, #100]	; 0x64
 80054f0:	81c2      	strh	r2, [r0, #14]
 80054f2:	6183      	str	r3, [r0, #24]
 80054f4:	4619      	mov	r1, r3
 80054f6:	2208      	movs	r2, #8
 80054f8:	305c      	adds	r0, #92	; 0x5c
 80054fa:	f000 f9e5 	bl	80058c8 <memset>
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <std+0x38>)
 8005500:	6263      	str	r3, [r4, #36]	; 0x24
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <std+0x3c>)
 8005504:	62a3      	str	r3, [r4, #40]	; 0x28
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <std+0x40>)
 8005508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <std+0x44>)
 800550c:	6224      	str	r4, [r4, #32]
 800550e:	6323      	str	r3, [r4, #48]	; 0x30
 8005510:	bd10      	pop	{r4, pc}
 8005512:	bf00      	nop
 8005514:	08005719 	.word	0x08005719
 8005518:	0800573b 	.word	0x0800573b
 800551c:	08005773 	.word	0x08005773
 8005520:	08005797 	.word	0x08005797

08005524 <stdio_exit_handler>:
 8005524:	4a02      	ldr	r2, [pc, #8]	; (8005530 <stdio_exit_handler+0xc>)
 8005526:	4903      	ldr	r1, [pc, #12]	; (8005534 <stdio_exit_handler+0x10>)
 8005528:	4803      	ldr	r0, [pc, #12]	; (8005538 <stdio_exit_handler+0x14>)
 800552a:	f000 b869 	b.w	8005600 <_fwalk_sglue>
 800552e:	bf00      	nop
 8005530:	20000010 	.word	0x20000010
 8005534:	08006329 	.word	0x08006329
 8005538:	2000001c 	.word	0x2000001c

0800553c <cleanup_stdio>:
 800553c:	6841      	ldr	r1, [r0, #4]
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <cleanup_stdio+0x34>)
 8005540:	4299      	cmp	r1, r3
 8005542:	b510      	push	{r4, lr}
 8005544:	4604      	mov	r4, r0
 8005546:	d001      	beq.n	800554c <cleanup_stdio+0x10>
 8005548:	f000 feee 	bl	8006328 <_fflush_r>
 800554c:	68a1      	ldr	r1, [r4, #8]
 800554e:	4b09      	ldr	r3, [pc, #36]	; (8005574 <cleanup_stdio+0x38>)
 8005550:	4299      	cmp	r1, r3
 8005552:	d002      	beq.n	800555a <cleanup_stdio+0x1e>
 8005554:	4620      	mov	r0, r4
 8005556:	f000 fee7 	bl	8006328 <_fflush_r>
 800555a:	68e1      	ldr	r1, [r4, #12]
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <cleanup_stdio+0x3c>)
 800555e:	4299      	cmp	r1, r3
 8005560:	d004      	beq.n	800556c <cleanup_stdio+0x30>
 8005562:	4620      	mov	r0, r4
 8005564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005568:	f000 bede 	b.w	8006328 <_fflush_r>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	20000e88 	.word	0x20000e88
 8005574:	20000ef0 	.word	0x20000ef0
 8005578:	20000f58 	.word	0x20000f58

0800557c <global_stdio_init.part.0>:
 800557c:	b510      	push	{r4, lr}
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <global_stdio_init.part.0+0x30>)
 8005580:	4c0b      	ldr	r4, [pc, #44]	; (80055b0 <global_stdio_init.part.0+0x34>)
 8005582:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <global_stdio_init.part.0+0x38>)
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	4620      	mov	r0, r4
 8005588:	2200      	movs	r2, #0
 800558a:	2104      	movs	r1, #4
 800558c:	f7ff ffa6 	bl	80054dc <std>
 8005590:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005594:	2201      	movs	r2, #1
 8005596:	2109      	movs	r1, #9
 8005598:	f7ff ffa0 	bl	80054dc <std>
 800559c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80055a0:	2202      	movs	r2, #2
 80055a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a6:	2112      	movs	r1, #18
 80055a8:	f7ff bf98 	b.w	80054dc <std>
 80055ac:	20000fc0 	.word	0x20000fc0
 80055b0:	20000e88 	.word	0x20000e88
 80055b4:	08005525 	.word	0x08005525

080055b8 <__sfp_lock_acquire>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__sfp_lock_acquire+0x8>)
 80055ba:	f000 ba53 	b.w	8005a64 <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20000fc9 	.word	0x20000fc9

080055c4 <__sfp_lock_release>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__sfp_lock_release+0x8>)
 80055c6:	f000 ba4e 	b.w	8005a66 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20000fc9 	.word	0x20000fc9

080055d0 <__sinit>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4604      	mov	r4, r0
 80055d4:	f7ff fff0 	bl	80055b8 <__sfp_lock_acquire>
 80055d8:	6a23      	ldr	r3, [r4, #32]
 80055da:	b11b      	cbz	r3, 80055e4 <__sinit+0x14>
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f7ff bff0 	b.w	80055c4 <__sfp_lock_release>
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <__sinit+0x28>)
 80055e6:	6223      	str	r3, [r4, #32]
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <__sinit+0x2c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f5      	bne.n	80055dc <__sinit+0xc>
 80055f0:	f7ff ffc4 	bl	800557c <global_stdio_init.part.0>
 80055f4:	e7f2      	b.n	80055dc <__sinit+0xc>
 80055f6:	bf00      	nop
 80055f8:	0800553d 	.word	0x0800553d
 80055fc:	20000fc0 	.word	0x20000fc0

08005600 <_fwalk_sglue>:
 8005600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005604:	4607      	mov	r7, r0
 8005606:	4688      	mov	r8, r1
 8005608:	4614      	mov	r4, r2
 800560a:	2600      	movs	r6, #0
 800560c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005610:	f1b9 0901 	subs.w	r9, r9, #1
 8005614:	d505      	bpl.n	8005622 <_fwalk_sglue+0x22>
 8005616:	6824      	ldr	r4, [r4, #0]
 8005618:	2c00      	cmp	r4, #0
 800561a:	d1f7      	bne.n	800560c <_fwalk_sglue+0xc>
 800561c:	4630      	mov	r0, r6
 800561e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d907      	bls.n	8005638 <_fwalk_sglue+0x38>
 8005628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800562c:	3301      	adds	r3, #1
 800562e:	d003      	beq.n	8005638 <_fwalk_sglue+0x38>
 8005630:	4629      	mov	r1, r5
 8005632:	4638      	mov	r0, r7
 8005634:	47c0      	blx	r8
 8005636:	4306      	orrs	r6, r0
 8005638:	3568      	adds	r5, #104	; 0x68
 800563a:	e7e9      	b.n	8005610 <_fwalk_sglue+0x10>

0800563c <iprintf>:
 800563c:	b40f      	push	{r0, r1, r2, r3}
 800563e:	b507      	push	{r0, r1, r2, lr}
 8005640:	4906      	ldr	r1, [pc, #24]	; (800565c <iprintf+0x20>)
 8005642:	ab04      	add	r3, sp, #16
 8005644:	6808      	ldr	r0, [r1, #0]
 8005646:	f853 2b04 	ldr.w	r2, [r3], #4
 800564a:	6881      	ldr	r1, [r0, #8]
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	f000 fb3b 	bl	8005cc8 <_vfiprintf_r>
 8005652:	b003      	add	sp, #12
 8005654:	f85d eb04 	ldr.w	lr, [sp], #4
 8005658:	b004      	add	sp, #16
 800565a:	4770      	bx	lr
 800565c:	20000068 	.word	0x20000068

08005660 <_puts_r>:
 8005660:	6a03      	ldr	r3, [r0, #32]
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	6884      	ldr	r4, [r0, #8]
 8005666:	4605      	mov	r5, r0
 8005668:	460e      	mov	r6, r1
 800566a:	b90b      	cbnz	r3, 8005670 <_puts_r+0x10>
 800566c:	f7ff ffb0 	bl	80055d0 <__sinit>
 8005670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005672:	07db      	lsls	r3, r3, #31
 8005674:	d405      	bmi.n	8005682 <_puts_r+0x22>
 8005676:	89a3      	ldrh	r3, [r4, #12]
 8005678:	0598      	lsls	r0, r3, #22
 800567a:	d402      	bmi.n	8005682 <_puts_r+0x22>
 800567c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800567e:	f000 f9f1 	bl	8005a64 <__retarget_lock_acquire_recursive>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	0719      	lsls	r1, r3, #28
 8005686:	d513      	bpl.n	80056b0 <_puts_r+0x50>
 8005688:	6923      	ldr	r3, [r4, #16]
 800568a:	b18b      	cbz	r3, 80056b0 <_puts_r+0x50>
 800568c:	3e01      	subs	r6, #1
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005694:	3b01      	subs	r3, #1
 8005696:	60a3      	str	r3, [r4, #8]
 8005698:	b9e9      	cbnz	r1, 80056d6 <_puts_r+0x76>
 800569a:	2b00      	cmp	r3, #0
 800569c:	da2e      	bge.n	80056fc <_puts_r+0x9c>
 800569e:	4622      	mov	r2, r4
 80056a0:	210a      	movs	r1, #10
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f87b 	bl	800579e <__swbuf_r>
 80056a8:	3001      	adds	r0, #1
 80056aa:	d007      	beq.n	80056bc <_puts_r+0x5c>
 80056ac:	250a      	movs	r5, #10
 80056ae:	e007      	b.n	80056c0 <_puts_r+0x60>
 80056b0:	4621      	mov	r1, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f8b0 	bl	8005818 <__swsetup_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d0e7      	beq.n	800568c <_puts_r+0x2c>
 80056bc:	f04f 35ff 	mov.w	r5, #4294967295
 80056c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c2:	07da      	lsls	r2, r3, #31
 80056c4:	d405      	bmi.n	80056d2 <_puts_r+0x72>
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	059b      	lsls	r3, r3, #22
 80056ca:	d402      	bmi.n	80056d2 <_puts_r+0x72>
 80056cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ce:	f000 f9ca 	bl	8005a66 <__retarget_lock_release_recursive>
 80056d2:	4628      	mov	r0, r5
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	da04      	bge.n	80056e4 <_puts_r+0x84>
 80056da:	69a2      	ldr	r2, [r4, #24]
 80056dc:	429a      	cmp	r2, r3
 80056de:	dc06      	bgt.n	80056ee <_puts_r+0x8e>
 80056e0:	290a      	cmp	r1, #10
 80056e2:	d004      	beq.n	80056ee <_puts_r+0x8e>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	6022      	str	r2, [r4, #0]
 80056ea:	7019      	strb	r1, [r3, #0]
 80056ec:	e7cf      	b.n	800568e <_puts_r+0x2e>
 80056ee:	4622      	mov	r2, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 f854 	bl	800579e <__swbuf_r>
 80056f6:	3001      	adds	r0, #1
 80056f8:	d1c9      	bne.n	800568e <_puts_r+0x2e>
 80056fa:	e7df      	b.n	80056bc <_puts_r+0x5c>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	250a      	movs	r5, #10
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	6022      	str	r2, [r4, #0]
 8005704:	701d      	strb	r5, [r3, #0]
 8005706:	e7db      	b.n	80056c0 <_puts_r+0x60>

08005708 <puts>:
 8005708:	4b02      	ldr	r3, [pc, #8]	; (8005714 <puts+0xc>)
 800570a:	4601      	mov	r1, r0
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	f7ff bfa7 	b.w	8005660 <_puts_r>
 8005712:	bf00      	nop
 8005714:	20000068 	.word	0x20000068

08005718 <__sread>:
 8005718:	b510      	push	{r4, lr}
 800571a:	460c      	mov	r4, r1
 800571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005720:	f000 f952 	bl	80059c8 <_read_r>
 8005724:	2800      	cmp	r0, #0
 8005726:	bfab      	itete	ge
 8005728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800572a:	89a3      	ldrhlt	r3, [r4, #12]
 800572c:	181b      	addge	r3, r3, r0
 800572e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005732:	bfac      	ite	ge
 8005734:	6563      	strge	r3, [r4, #84]	; 0x54
 8005736:	81a3      	strhlt	r3, [r4, #12]
 8005738:	bd10      	pop	{r4, pc}

0800573a <__swrite>:
 800573a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573e:	461f      	mov	r7, r3
 8005740:	898b      	ldrh	r3, [r1, #12]
 8005742:	05db      	lsls	r3, r3, #23
 8005744:	4605      	mov	r5, r0
 8005746:	460c      	mov	r4, r1
 8005748:	4616      	mov	r6, r2
 800574a:	d505      	bpl.n	8005758 <__swrite+0x1e>
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	2302      	movs	r3, #2
 8005752:	2200      	movs	r2, #0
 8005754:	f000 f926 	bl	80059a4 <_lseek_r>
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800575e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	4632      	mov	r2, r6
 8005766:	463b      	mov	r3, r7
 8005768:	4628      	mov	r0, r5
 800576a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	f000 b93d 	b.w	80059ec <_write_r>

08005772 <__sseek>:
 8005772:	b510      	push	{r4, lr}
 8005774:	460c      	mov	r4, r1
 8005776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577a:	f000 f913 	bl	80059a4 <_lseek_r>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	bf15      	itete	ne
 8005784:	6560      	strne	r0, [r4, #84]	; 0x54
 8005786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800578a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800578e:	81a3      	strheq	r3, [r4, #12]
 8005790:	bf18      	it	ne
 8005792:	81a3      	strhne	r3, [r4, #12]
 8005794:	bd10      	pop	{r4, pc}

08005796 <__sclose>:
 8005796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579a:	f000 b89d 	b.w	80058d8 <_close_r>

0800579e <__swbuf_r>:
 800579e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a0:	460e      	mov	r6, r1
 80057a2:	4614      	mov	r4, r2
 80057a4:	4605      	mov	r5, r0
 80057a6:	b118      	cbz	r0, 80057b0 <__swbuf_r+0x12>
 80057a8:	6a03      	ldr	r3, [r0, #32]
 80057aa:	b90b      	cbnz	r3, 80057b0 <__swbuf_r+0x12>
 80057ac:	f7ff ff10 	bl	80055d0 <__sinit>
 80057b0:	69a3      	ldr	r3, [r4, #24]
 80057b2:	60a3      	str	r3, [r4, #8]
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	071a      	lsls	r2, r3, #28
 80057b8:	d525      	bpl.n	8005806 <__swbuf_r+0x68>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	b31b      	cbz	r3, 8005806 <__swbuf_r+0x68>
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	6922      	ldr	r2, [r4, #16]
 80057c2:	1a98      	subs	r0, r3, r2
 80057c4:	6963      	ldr	r3, [r4, #20]
 80057c6:	b2f6      	uxtb	r6, r6
 80057c8:	4283      	cmp	r3, r0
 80057ca:	4637      	mov	r7, r6
 80057cc:	dc04      	bgt.n	80057d8 <__swbuf_r+0x3a>
 80057ce:	4621      	mov	r1, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 fda9 	bl	8006328 <_fflush_r>
 80057d6:	b9e0      	cbnz	r0, 8005812 <__swbuf_r+0x74>
 80057d8:	68a3      	ldr	r3, [r4, #8]
 80057da:	3b01      	subs	r3, #1
 80057dc:	60a3      	str	r3, [r4, #8]
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	6022      	str	r2, [r4, #0]
 80057e4:	701e      	strb	r6, [r3, #0]
 80057e6:	6962      	ldr	r2, [r4, #20]
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d004      	beq.n	80057f8 <__swbuf_r+0x5a>
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	07db      	lsls	r3, r3, #31
 80057f2:	d506      	bpl.n	8005802 <__swbuf_r+0x64>
 80057f4:	2e0a      	cmp	r6, #10
 80057f6:	d104      	bne.n	8005802 <__swbuf_r+0x64>
 80057f8:	4621      	mov	r1, r4
 80057fa:	4628      	mov	r0, r5
 80057fc:	f000 fd94 	bl	8006328 <_fflush_r>
 8005800:	b938      	cbnz	r0, 8005812 <__swbuf_r+0x74>
 8005802:	4638      	mov	r0, r7
 8005804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005806:	4621      	mov	r1, r4
 8005808:	4628      	mov	r0, r5
 800580a:	f000 f805 	bl	8005818 <__swsetup_r>
 800580e:	2800      	cmp	r0, #0
 8005810:	d0d5      	beq.n	80057be <__swbuf_r+0x20>
 8005812:	f04f 37ff 	mov.w	r7, #4294967295
 8005816:	e7f4      	b.n	8005802 <__swbuf_r+0x64>

08005818 <__swsetup_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4b2a      	ldr	r3, [pc, #168]	; (80058c4 <__swsetup_r+0xac>)
 800581c:	4605      	mov	r5, r0
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	460c      	mov	r4, r1
 8005822:	b118      	cbz	r0, 800582c <__swsetup_r+0x14>
 8005824:	6a03      	ldr	r3, [r0, #32]
 8005826:	b90b      	cbnz	r3, 800582c <__swsetup_r+0x14>
 8005828:	f7ff fed2 	bl	80055d0 <__sinit>
 800582c:	89a3      	ldrh	r3, [r4, #12]
 800582e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005832:	0718      	lsls	r0, r3, #28
 8005834:	d422      	bmi.n	800587c <__swsetup_r+0x64>
 8005836:	06d9      	lsls	r1, r3, #27
 8005838:	d407      	bmi.n	800584a <__swsetup_r+0x32>
 800583a:	2309      	movs	r3, #9
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e034      	b.n	80058b4 <__swsetup_r+0x9c>
 800584a:	0758      	lsls	r0, r3, #29
 800584c:	d512      	bpl.n	8005874 <__swsetup_r+0x5c>
 800584e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005850:	b141      	cbz	r1, 8005864 <__swsetup_r+0x4c>
 8005852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005856:	4299      	cmp	r1, r3
 8005858:	d002      	beq.n	8005860 <__swsetup_r+0x48>
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f912 	bl	8005a84 <_free_r>
 8005860:	2300      	movs	r3, #0
 8005862:	6363      	str	r3, [r4, #52]	; 0x34
 8005864:	89a3      	ldrh	r3, [r4, #12]
 8005866:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	2300      	movs	r3, #0
 800586e:	6063      	str	r3, [r4, #4]
 8005870:	6923      	ldr	r3, [r4, #16]
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f043 0308 	orr.w	r3, r3, #8
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	b94b      	cbnz	r3, 8005894 <__swsetup_r+0x7c>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588a:	d003      	beq.n	8005894 <__swsetup_r+0x7c>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 fd98 	bl	80063c4 <__smakebuf_r>
 8005894:	89a0      	ldrh	r0, [r4, #12]
 8005896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800589a:	f010 0301 	ands.w	r3, r0, #1
 800589e:	d00a      	beq.n	80058b6 <__swsetup_r+0x9e>
 80058a0:	2300      	movs	r3, #0
 80058a2:	60a3      	str	r3, [r4, #8]
 80058a4:	6963      	ldr	r3, [r4, #20]
 80058a6:	425b      	negs	r3, r3
 80058a8:	61a3      	str	r3, [r4, #24]
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	b943      	cbnz	r3, 80058c0 <__swsetup_r+0xa8>
 80058ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058b2:	d1c4      	bne.n	800583e <__swsetup_r+0x26>
 80058b4:	bd38      	pop	{r3, r4, r5, pc}
 80058b6:	0781      	lsls	r1, r0, #30
 80058b8:	bf58      	it	pl
 80058ba:	6963      	ldrpl	r3, [r4, #20]
 80058bc:	60a3      	str	r3, [r4, #8]
 80058be:	e7f4      	b.n	80058aa <__swsetup_r+0x92>
 80058c0:	2000      	movs	r0, #0
 80058c2:	e7f7      	b.n	80058b4 <__swsetup_r+0x9c>
 80058c4:	20000068 	.word	0x20000068

080058c8 <memset>:
 80058c8:	4402      	add	r2, r0
 80058ca:	4603      	mov	r3, r0
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d100      	bne.n	80058d2 <memset+0xa>
 80058d0:	4770      	bx	lr
 80058d2:	f803 1b01 	strb.w	r1, [r3], #1
 80058d6:	e7f9      	b.n	80058cc <memset+0x4>

080058d8 <_close_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d06      	ldr	r5, [pc, #24]	; (80058f4 <_close_r+0x1c>)
 80058dc:	2300      	movs	r3, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	602b      	str	r3, [r5, #0]
 80058e4:	f7fb f9b9 	bl	8000c5a <_close>
 80058e8:	1c43      	adds	r3, r0, #1
 80058ea:	d102      	bne.n	80058f2 <_close_r+0x1a>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b103      	cbz	r3, 80058f2 <_close_r+0x1a>
 80058f0:	6023      	str	r3, [r4, #0]
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20000fc4 	.word	0x20000fc4

080058f8 <_reclaim_reent>:
 80058f8:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <_reclaim_reent+0xa8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4283      	cmp	r3, r0
 80058fe:	b570      	push	{r4, r5, r6, lr}
 8005900:	4604      	mov	r4, r0
 8005902:	d04b      	beq.n	800599c <_reclaim_reent+0xa4>
 8005904:	69c3      	ldr	r3, [r0, #28]
 8005906:	b143      	cbz	r3, 800591a <_reclaim_reent+0x22>
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d144      	bne.n	8005998 <_reclaim_reent+0xa0>
 800590e:	69e3      	ldr	r3, [r4, #28]
 8005910:	6819      	ldr	r1, [r3, #0]
 8005912:	b111      	cbz	r1, 800591a <_reclaim_reent+0x22>
 8005914:	4620      	mov	r0, r4
 8005916:	f000 f8b5 	bl	8005a84 <_free_r>
 800591a:	6961      	ldr	r1, [r4, #20]
 800591c:	b111      	cbz	r1, 8005924 <_reclaim_reent+0x2c>
 800591e:	4620      	mov	r0, r4
 8005920:	f000 f8b0 	bl	8005a84 <_free_r>
 8005924:	69e1      	ldr	r1, [r4, #28]
 8005926:	b111      	cbz	r1, 800592e <_reclaim_reent+0x36>
 8005928:	4620      	mov	r0, r4
 800592a:	f000 f8ab 	bl	8005a84 <_free_r>
 800592e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005930:	b111      	cbz	r1, 8005938 <_reclaim_reent+0x40>
 8005932:	4620      	mov	r0, r4
 8005934:	f000 f8a6 	bl	8005a84 <_free_r>
 8005938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800593a:	b111      	cbz	r1, 8005942 <_reclaim_reent+0x4a>
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f8a1 	bl	8005a84 <_free_r>
 8005942:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005944:	b111      	cbz	r1, 800594c <_reclaim_reent+0x54>
 8005946:	4620      	mov	r0, r4
 8005948:	f000 f89c 	bl	8005a84 <_free_r>
 800594c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800594e:	b111      	cbz	r1, 8005956 <_reclaim_reent+0x5e>
 8005950:	4620      	mov	r0, r4
 8005952:	f000 f897 	bl	8005a84 <_free_r>
 8005956:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005958:	b111      	cbz	r1, 8005960 <_reclaim_reent+0x68>
 800595a:	4620      	mov	r0, r4
 800595c:	f000 f892 	bl	8005a84 <_free_r>
 8005960:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005962:	b111      	cbz	r1, 800596a <_reclaim_reent+0x72>
 8005964:	4620      	mov	r0, r4
 8005966:	f000 f88d 	bl	8005a84 <_free_r>
 800596a:	6a23      	ldr	r3, [r4, #32]
 800596c:	b1b3      	cbz	r3, 800599c <_reclaim_reent+0xa4>
 800596e:	4620      	mov	r0, r4
 8005970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005974:	4718      	bx	r3
 8005976:	5949      	ldr	r1, [r1, r5]
 8005978:	b941      	cbnz	r1, 800598c <_reclaim_reent+0x94>
 800597a:	3504      	adds	r5, #4
 800597c:	69e3      	ldr	r3, [r4, #28]
 800597e:	2d80      	cmp	r5, #128	; 0x80
 8005980:	68d9      	ldr	r1, [r3, #12]
 8005982:	d1f8      	bne.n	8005976 <_reclaim_reent+0x7e>
 8005984:	4620      	mov	r0, r4
 8005986:	f000 f87d 	bl	8005a84 <_free_r>
 800598a:	e7c0      	b.n	800590e <_reclaim_reent+0x16>
 800598c:	680e      	ldr	r6, [r1, #0]
 800598e:	4620      	mov	r0, r4
 8005990:	f000 f878 	bl	8005a84 <_free_r>
 8005994:	4631      	mov	r1, r6
 8005996:	e7ef      	b.n	8005978 <_reclaim_reent+0x80>
 8005998:	2500      	movs	r5, #0
 800599a:	e7ef      	b.n	800597c <_reclaim_reent+0x84>
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	bf00      	nop
 80059a0:	20000068 	.word	0x20000068

080059a4 <_lseek_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d07      	ldr	r5, [pc, #28]	; (80059c4 <_lseek_r+0x20>)
 80059a8:	4604      	mov	r4, r0
 80059aa:	4608      	mov	r0, r1
 80059ac:	4611      	mov	r1, r2
 80059ae:	2200      	movs	r2, #0
 80059b0:	602a      	str	r2, [r5, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	f7fb f978 	bl	8000ca8 <_lseek>
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d102      	bne.n	80059c2 <_lseek_r+0x1e>
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	b103      	cbz	r3, 80059c2 <_lseek_r+0x1e>
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	bd38      	pop	{r3, r4, r5, pc}
 80059c4:	20000fc4 	.word	0x20000fc4

080059c8 <_read_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4d07      	ldr	r5, [pc, #28]	; (80059e8 <_read_r+0x20>)
 80059cc:	4604      	mov	r4, r0
 80059ce:	4608      	mov	r0, r1
 80059d0:	4611      	mov	r1, r2
 80059d2:	2200      	movs	r2, #0
 80059d4:	602a      	str	r2, [r5, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f7fb f922 	bl	8000c20 <_read>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d102      	bne.n	80059e6 <_read_r+0x1e>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	b103      	cbz	r3, 80059e6 <_read_r+0x1e>
 80059e4:	6023      	str	r3, [r4, #0]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
 80059e8:	20000fc4 	.word	0x20000fc4

080059ec <_write_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4d07      	ldr	r5, [pc, #28]	; (8005a0c <_write_r+0x20>)
 80059f0:	4604      	mov	r4, r0
 80059f2:	4608      	mov	r0, r1
 80059f4:	4611      	mov	r1, r2
 80059f6:	2200      	movs	r2, #0
 80059f8:	602a      	str	r2, [r5, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f7fb f8f4 	bl	8000be8 <_write>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_write_r+0x1e>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_write_r+0x1e>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20000fc4 	.word	0x20000fc4

08005a10 <__errno>:
 8005a10:	4b01      	ldr	r3, [pc, #4]	; (8005a18 <__errno+0x8>)
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	20000068 	.word	0x20000068

08005a1c <__libc_init_array>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4d0d      	ldr	r5, [pc, #52]	; (8005a54 <__libc_init_array+0x38>)
 8005a20:	4c0d      	ldr	r4, [pc, #52]	; (8005a58 <__libc_init_array+0x3c>)
 8005a22:	1b64      	subs	r4, r4, r5
 8005a24:	10a4      	asrs	r4, r4, #2
 8005a26:	2600      	movs	r6, #0
 8005a28:	42a6      	cmp	r6, r4
 8005a2a:	d109      	bne.n	8005a40 <__libc_init_array+0x24>
 8005a2c:	4d0b      	ldr	r5, [pc, #44]	; (8005a5c <__libc_init_array+0x40>)
 8005a2e:	4c0c      	ldr	r4, [pc, #48]	; (8005a60 <__libc_init_array+0x44>)
 8005a30:	f000 fd36 	bl	80064a0 <_init>
 8005a34:	1b64      	subs	r4, r4, r5
 8005a36:	10a4      	asrs	r4, r4, #2
 8005a38:	2600      	movs	r6, #0
 8005a3a:	42a6      	cmp	r6, r4
 8005a3c:	d105      	bne.n	8005a4a <__libc_init_array+0x2e>
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
 8005a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a44:	4798      	blx	r3
 8005a46:	3601      	adds	r6, #1
 8005a48:	e7ee      	b.n	8005a28 <__libc_init_array+0xc>
 8005a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a4e:	4798      	blx	r3
 8005a50:	3601      	adds	r6, #1
 8005a52:	e7f2      	b.n	8005a3a <__libc_init_array+0x1e>
 8005a54:	080065ac 	.word	0x080065ac
 8005a58:	080065ac 	.word	0x080065ac
 8005a5c:	080065ac 	.word	0x080065ac
 8005a60:	080065b0 	.word	0x080065b0

08005a64 <__retarget_lock_acquire_recursive>:
 8005a64:	4770      	bx	lr

08005a66 <__retarget_lock_release_recursive>:
 8005a66:	4770      	bx	lr

08005a68 <memcpy>:
 8005a68:	440a      	add	r2, r1
 8005a6a:	4291      	cmp	r1, r2
 8005a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a70:	d100      	bne.n	8005a74 <memcpy+0xc>
 8005a72:	4770      	bx	lr
 8005a74:	b510      	push	{r4, lr}
 8005a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a7e:	4291      	cmp	r1, r2
 8005a80:	d1f9      	bne.n	8005a76 <memcpy+0xe>
 8005a82:	bd10      	pop	{r4, pc}

08005a84 <_free_r>:
 8005a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a86:	2900      	cmp	r1, #0
 8005a88:	d044      	beq.n	8005b14 <_free_r+0x90>
 8005a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a8e:	9001      	str	r0, [sp, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f1a1 0404 	sub.w	r4, r1, #4
 8005a96:	bfb8      	it	lt
 8005a98:	18e4      	addlt	r4, r4, r3
 8005a9a:	f000 f8df 	bl	8005c5c <__malloc_lock>
 8005a9e:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <_free_r+0x94>)
 8005aa0:	9801      	ldr	r0, [sp, #4]
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	b933      	cbnz	r3, 8005ab4 <_free_r+0x30>
 8005aa6:	6063      	str	r3, [r4, #4]
 8005aa8:	6014      	str	r4, [r2, #0]
 8005aaa:	b003      	add	sp, #12
 8005aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ab0:	f000 b8da 	b.w	8005c68 <__malloc_unlock>
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	d908      	bls.n	8005aca <_free_r+0x46>
 8005ab8:	6825      	ldr	r5, [r4, #0]
 8005aba:	1961      	adds	r1, r4, r5
 8005abc:	428b      	cmp	r3, r1
 8005abe:	bf01      	itttt	eq
 8005ac0:	6819      	ldreq	r1, [r3, #0]
 8005ac2:	685b      	ldreq	r3, [r3, #4]
 8005ac4:	1949      	addeq	r1, r1, r5
 8005ac6:	6021      	streq	r1, [r4, #0]
 8005ac8:	e7ed      	b.n	8005aa6 <_free_r+0x22>
 8005aca:	461a      	mov	r2, r3
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	b10b      	cbz	r3, 8005ad4 <_free_r+0x50>
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d9fa      	bls.n	8005aca <_free_r+0x46>
 8005ad4:	6811      	ldr	r1, [r2, #0]
 8005ad6:	1855      	adds	r5, r2, r1
 8005ad8:	42a5      	cmp	r5, r4
 8005ada:	d10b      	bne.n	8005af4 <_free_r+0x70>
 8005adc:	6824      	ldr	r4, [r4, #0]
 8005ade:	4421      	add	r1, r4
 8005ae0:	1854      	adds	r4, r2, r1
 8005ae2:	42a3      	cmp	r3, r4
 8005ae4:	6011      	str	r1, [r2, #0]
 8005ae6:	d1e0      	bne.n	8005aaa <_free_r+0x26>
 8005ae8:	681c      	ldr	r4, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	6053      	str	r3, [r2, #4]
 8005aee:	440c      	add	r4, r1
 8005af0:	6014      	str	r4, [r2, #0]
 8005af2:	e7da      	b.n	8005aaa <_free_r+0x26>
 8005af4:	d902      	bls.n	8005afc <_free_r+0x78>
 8005af6:	230c      	movs	r3, #12
 8005af8:	6003      	str	r3, [r0, #0]
 8005afa:	e7d6      	b.n	8005aaa <_free_r+0x26>
 8005afc:	6825      	ldr	r5, [r4, #0]
 8005afe:	1961      	adds	r1, r4, r5
 8005b00:	428b      	cmp	r3, r1
 8005b02:	bf04      	itt	eq
 8005b04:	6819      	ldreq	r1, [r3, #0]
 8005b06:	685b      	ldreq	r3, [r3, #4]
 8005b08:	6063      	str	r3, [r4, #4]
 8005b0a:	bf04      	itt	eq
 8005b0c:	1949      	addeq	r1, r1, r5
 8005b0e:	6021      	streq	r1, [r4, #0]
 8005b10:	6054      	str	r4, [r2, #4]
 8005b12:	e7ca      	b.n	8005aaa <_free_r+0x26>
 8005b14:	b003      	add	sp, #12
 8005b16:	bd30      	pop	{r4, r5, pc}
 8005b18:	20000fcc 	.word	0x20000fcc

08005b1c <sbrk_aligned>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4e0e      	ldr	r6, [pc, #56]	; (8005b58 <sbrk_aligned+0x3c>)
 8005b20:	460c      	mov	r4, r1
 8005b22:	6831      	ldr	r1, [r6, #0]
 8005b24:	4605      	mov	r5, r0
 8005b26:	b911      	cbnz	r1, 8005b2e <sbrk_aligned+0x12>
 8005b28:	f000 fcaa 	bl	8006480 <_sbrk_r>
 8005b2c:	6030      	str	r0, [r6, #0]
 8005b2e:	4621      	mov	r1, r4
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 fca5 	bl	8006480 <_sbrk_r>
 8005b36:	1c43      	adds	r3, r0, #1
 8005b38:	d00a      	beq.n	8005b50 <sbrk_aligned+0x34>
 8005b3a:	1cc4      	adds	r4, r0, #3
 8005b3c:	f024 0403 	bic.w	r4, r4, #3
 8005b40:	42a0      	cmp	r0, r4
 8005b42:	d007      	beq.n	8005b54 <sbrk_aligned+0x38>
 8005b44:	1a21      	subs	r1, r4, r0
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 fc9a 	bl	8006480 <_sbrk_r>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d101      	bne.n	8005b54 <sbrk_aligned+0x38>
 8005b50:	f04f 34ff 	mov.w	r4, #4294967295
 8005b54:	4620      	mov	r0, r4
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	20000fd0 	.word	0x20000fd0

08005b5c <_malloc_r>:
 8005b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b60:	1ccd      	adds	r5, r1, #3
 8005b62:	f025 0503 	bic.w	r5, r5, #3
 8005b66:	3508      	adds	r5, #8
 8005b68:	2d0c      	cmp	r5, #12
 8005b6a:	bf38      	it	cc
 8005b6c:	250c      	movcc	r5, #12
 8005b6e:	2d00      	cmp	r5, #0
 8005b70:	4607      	mov	r7, r0
 8005b72:	db01      	blt.n	8005b78 <_malloc_r+0x1c>
 8005b74:	42a9      	cmp	r1, r5
 8005b76:	d905      	bls.n	8005b84 <_malloc_r+0x28>
 8005b78:	230c      	movs	r3, #12
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	2600      	movs	r6, #0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c58 <_malloc_r+0xfc>
 8005b88:	f000 f868 	bl	8005c5c <__malloc_lock>
 8005b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b90:	461c      	mov	r4, r3
 8005b92:	bb5c      	cbnz	r4, 8005bec <_malloc_r+0x90>
 8005b94:	4629      	mov	r1, r5
 8005b96:	4638      	mov	r0, r7
 8005b98:	f7ff ffc0 	bl	8005b1c <sbrk_aligned>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	d155      	bne.n	8005c4e <_malloc_r+0xf2>
 8005ba2:	f8d8 4000 	ldr.w	r4, [r8]
 8005ba6:	4626      	mov	r6, r4
 8005ba8:	2e00      	cmp	r6, #0
 8005baa:	d145      	bne.n	8005c38 <_malloc_r+0xdc>
 8005bac:	2c00      	cmp	r4, #0
 8005bae:	d048      	beq.n	8005c42 <_malloc_r+0xe6>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	4631      	mov	r1, r6
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	eb04 0903 	add.w	r9, r4, r3
 8005bba:	f000 fc61 	bl	8006480 <_sbrk_r>
 8005bbe:	4581      	cmp	r9, r0
 8005bc0:	d13f      	bne.n	8005c42 <_malloc_r+0xe6>
 8005bc2:	6821      	ldr	r1, [r4, #0]
 8005bc4:	1a6d      	subs	r5, r5, r1
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4638      	mov	r0, r7
 8005bca:	f7ff ffa7 	bl	8005b1c <sbrk_aligned>
 8005bce:	3001      	adds	r0, #1
 8005bd0:	d037      	beq.n	8005c42 <_malloc_r+0xe6>
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	442b      	add	r3, r5
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d038      	beq.n	8005c52 <_malloc_r+0xf6>
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	42a2      	cmp	r2, r4
 8005be4:	d12b      	bne.n	8005c3e <_malloc_r+0xe2>
 8005be6:	2200      	movs	r2, #0
 8005be8:	605a      	str	r2, [r3, #4]
 8005bea:	e00f      	b.n	8005c0c <_malloc_r+0xb0>
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	1b52      	subs	r2, r2, r5
 8005bf0:	d41f      	bmi.n	8005c32 <_malloc_r+0xd6>
 8005bf2:	2a0b      	cmp	r2, #11
 8005bf4:	d917      	bls.n	8005c26 <_malloc_r+0xca>
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	6025      	str	r5, [r4, #0]
 8005bfc:	bf18      	it	ne
 8005bfe:	6059      	strne	r1, [r3, #4]
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	bf08      	it	eq
 8005c04:	f8c8 1000 	streq.w	r1, [r8]
 8005c08:	5162      	str	r2, [r4, r5]
 8005c0a:	604b      	str	r3, [r1, #4]
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	f104 060b 	add.w	r6, r4, #11
 8005c12:	f000 f829 	bl	8005c68 <__malloc_unlock>
 8005c16:	f026 0607 	bic.w	r6, r6, #7
 8005c1a:	1d23      	adds	r3, r4, #4
 8005c1c:	1af2      	subs	r2, r6, r3
 8005c1e:	d0ae      	beq.n	8005b7e <_malloc_r+0x22>
 8005c20:	1b9b      	subs	r3, r3, r6
 8005c22:	50a3      	str	r3, [r4, r2]
 8005c24:	e7ab      	b.n	8005b7e <_malloc_r+0x22>
 8005c26:	42a3      	cmp	r3, r4
 8005c28:	6862      	ldr	r2, [r4, #4]
 8005c2a:	d1dd      	bne.n	8005be8 <_malloc_r+0x8c>
 8005c2c:	f8c8 2000 	str.w	r2, [r8]
 8005c30:	e7ec      	b.n	8005c0c <_malloc_r+0xb0>
 8005c32:	4623      	mov	r3, r4
 8005c34:	6864      	ldr	r4, [r4, #4]
 8005c36:	e7ac      	b.n	8005b92 <_malloc_r+0x36>
 8005c38:	4634      	mov	r4, r6
 8005c3a:	6876      	ldr	r6, [r6, #4]
 8005c3c:	e7b4      	b.n	8005ba8 <_malloc_r+0x4c>
 8005c3e:	4613      	mov	r3, r2
 8005c40:	e7cc      	b.n	8005bdc <_malloc_r+0x80>
 8005c42:	230c      	movs	r3, #12
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4638      	mov	r0, r7
 8005c48:	f000 f80e 	bl	8005c68 <__malloc_unlock>
 8005c4c:	e797      	b.n	8005b7e <_malloc_r+0x22>
 8005c4e:	6025      	str	r5, [r4, #0]
 8005c50:	e7dc      	b.n	8005c0c <_malloc_r+0xb0>
 8005c52:	605b      	str	r3, [r3, #4]
 8005c54:	deff      	udf	#255	; 0xff
 8005c56:	bf00      	nop
 8005c58:	20000fcc 	.word	0x20000fcc

08005c5c <__malloc_lock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__malloc_lock+0x8>)
 8005c5e:	f7ff bf01 	b.w	8005a64 <__retarget_lock_acquire_recursive>
 8005c62:	bf00      	nop
 8005c64:	20000fc8 	.word	0x20000fc8

08005c68 <__malloc_unlock>:
 8005c68:	4801      	ldr	r0, [pc, #4]	; (8005c70 <__malloc_unlock+0x8>)
 8005c6a:	f7ff befc 	b.w	8005a66 <__retarget_lock_release_recursive>
 8005c6e:	bf00      	nop
 8005c70:	20000fc8 	.word	0x20000fc8

08005c74 <__sfputc_r>:
 8005c74:	6893      	ldr	r3, [r2, #8]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	b410      	push	{r4}
 8005c7c:	6093      	str	r3, [r2, #8]
 8005c7e:	da08      	bge.n	8005c92 <__sfputc_r+0x1e>
 8005c80:	6994      	ldr	r4, [r2, #24]
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	db01      	blt.n	8005c8a <__sfputc_r+0x16>
 8005c86:	290a      	cmp	r1, #10
 8005c88:	d103      	bne.n	8005c92 <__sfputc_r+0x1e>
 8005c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c8e:	f7ff bd86 	b.w	800579e <__swbuf_r>
 8005c92:	6813      	ldr	r3, [r2, #0]
 8005c94:	1c58      	adds	r0, r3, #1
 8005c96:	6010      	str	r0, [r2, #0]
 8005c98:	7019      	strb	r1, [r3, #0]
 8005c9a:	4608      	mov	r0, r1
 8005c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <__sfputs_r>:
 8005ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	460f      	mov	r7, r1
 8005ca8:	4614      	mov	r4, r2
 8005caa:	18d5      	adds	r5, r2, r3
 8005cac:	42ac      	cmp	r4, r5
 8005cae:	d101      	bne.n	8005cb4 <__sfputs_r+0x12>
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	e007      	b.n	8005cc4 <__sfputs_r+0x22>
 8005cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb8:	463a      	mov	r2, r7
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f7ff ffda 	bl	8005c74 <__sfputc_r>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d1f3      	bne.n	8005cac <__sfputs_r+0xa>
 8005cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cc8 <_vfiprintf_r>:
 8005cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ccc:	460d      	mov	r5, r1
 8005cce:	b09d      	sub	sp, #116	; 0x74
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	4698      	mov	r8, r3
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	b118      	cbz	r0, 8005ce0 <_vfiprintf_r+0x18>
 8005cd8:	6a03      	ldr	r3, [r0, #32]
 8005cda:	b90b      	cbnz	r3, 8005ce0 <_vfiprintf_r+0x18>
 8005cdc:	f7ff fc78 	bl	80055d0 <__sinit>
 8005ce0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ce2:	07d9      	lsls	r1, r3, #31
 8005ce4:	d405      	bmi.n	8005cf2 <_vfiprintf_r+0x2a>
 8005ce6:	89ab      	ldrh	r3, [r5, #12]
 8005ce8:	059a      	lsls	r2, r3, #22
 8005cea:	d402      	bmi.n	8005cf2 <_vfiprintf_r+0x2a>
 8005cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cee:	f7ff feb9 	bl	8005a64 <__retarget_lock_acquire_recursive>
 8005cf2:	89ab      	ldrh	r3, [r5, #12]
 8005cf4:	071b      	lsls	r3, r3, #28
 8005cf6:	d501      	bpl.n	8005cfc <_vfiprintf_r+0x34>
 8005cf8:	692b      	ldr	r3, [r5, #16]
 8005cfa:	b99b      	cbnz	r3, 8005d24 <_vfiprintf_r+0x5c>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7ff fd8a 	bl	8005818 <__swsetup_r>
 8005d04:	b170      	cbz	r0, 8005d24 <_vfiprintf_r+0x5c>
 8005d06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d08:	07dc      	lsls	r4, r3, #31
 8005d0a:	d504      	bpl.n	8005d16 <_vfiprintf_r+0x4e>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d10:	b01d      	add	sp, #116	; 0x74
 8005d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d16:	89ab      	ldrh	r3, [r5, #12]
 8005d18:	0598      	lsls	r0, r3, #22
 8005d1a:	d4f7      	bmi.n	8005d0c <_vfiprintf_r+0x44>
 8005d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d1e:	f7ff fea2 	bl	8005a66 <__retarget_lock_release_recursive>
 8005d22:	e7f3      	b.n	8005d0c <_vfiprintf_r+0x44>
 8005d24:	2300      	movs	r3, #0
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	2320      	movs	r3, #32
 8005d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d32:	2330      	movs	r3, #48	; 0x30
 8005d34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005ee8 <_vfiprintf_r+0x220>
 8005d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d3c:	f04f 0901 	mov.w	r9, #1
 8005d40:	4623      	mov	r3, r4
 8005d42:	469a      	mov	sl, r3
 8005d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d48:	b10a      	cbz	r2, 8005d4e <_vfiprintf_r+0x86>
 8005d4a:	2a25      	cmp	r2, #37	; 0x25
 8005d4c:	d1f9      	bne.n	8005d42 <_vfiprintf_r+0x7a>
 8005d4e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d52:	d00b      	beq.n	8005d6c <_vfiprintf_r+0xa4>
 8005d54:	465b      	mov	r3, fp
 8005d56:	4622      	mov	r2, r4
 8005d58:	4629      	mov	r1, r5
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f7ff ffa1 	bl	8005ca2 <__sfputs_r>
 8005d60:	3001      	adds	r0, #1
 8005d62:	f000 80a9 	beq.w	8005eb8 <_vfiprintf_r+0x1f0>
 8005d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d68:	445a      	add	r2, fp
 8005d6a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 80a1 	beq.w	8005eb8 <_vfiprintf_r+0x1f0>
 8005d76:	2300      	movs	r3, #0
 8005d78:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d80:	f10a 0a01 	add.w	sl, sl, #1
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	9307      	str	r3, [sp, #28]
 8005d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d8e:	4654      	mov	r4, sl
 8005d90:	2205      	movs	r2, #5
 8005d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d96:	4854      	ldr	r0, [pc, #336]	; (8005ee8 <_vfiprintf_r+0x220>)
 8005d98:	f7fa fa42 	bl	8000220 <memchr>
 8005d9c:	9a04      	ldr	r2, [sp, #16]
 8005d9e:	b9d8      	cbnz	r0, 8005dd8 <_vfiprintf_r+0x110>
 8005da0:	06d1      	lsls	r1, r2, #27
 8005da2:	bf44      	itt	mi
 8005da4:	2320      	movmi	r3, #32
 8005da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005daa:	0713      	lsls	r3, r2, #28
 8005dac:	bf44      	itt	mi
 8005dae:	232b      	movmi	r3, #43	; 0x2b
 8005db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005db4:	f89a 3000 	ldrb.w	r3, [sl]
 8005db8:	2b2a      	cmp	r3, #42	; 0x2a
 8005dba:	d015      	beq.n	8005de8 <_vfiprintf_r+0x120>
 8005dbc:	9a07      	ldr	r2, [sp, #28]
 8005dbe:	4654      	mov	r4, sl
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f04f 0c0a 	mov.w	ip, #10
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dcc:	3b30      	subs	r3, #48	; 0x30
 8005dce:	2b09      	cmp	r3, #9
 8005dd0:	d94d      	bls.n	8005e6e <_vfiprintf_r+0x1a6>
 8005dd2:	b1b0      	cbz	r0, 8005e02 <_vfiprintf_r+0x13a>
 8005dd4:	9207      	str	r2, [sp, #28]
 8005dd6:	e014      	b.n	8005e02 <_vfiprintf_r+0x13a>
 8005dd8:	eba0 0308 	sub.w	r3, r0, r8
 8005ddc:	fa09 f303 	lsl.w	r3, r9, r3
 8005de0:	4313      	orrs	r3, r2
 8005de2:	9304      	str	r3, [sp, #16]
 8005de4:	46a2      	mov	sl, r4
 8005de6:	e7d2      	b.n	8005d8e <_vfiprintf_r+0xc6>
 8005de8:	9b03      	ldr	r3, [sp, #12]
 8005dea:	1d19      	adds	r1, r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	9103      	str	r1, [sp, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bfbb      	ittet	lt
 8005df4:	425b      	neglt	r3, r3
 8005df6:	f042 0202 	orrlt.w	r2, r2, #2
 8005dfa:	9307      	strge	r3, [sp, #28]
 8005dfc:	9307      	strlt	r3, [sp, #28]
 8005dfe:	bfb8      	it	lt
 8005e00:	9204      	strlt	r2, [sp, #16]
 8005e02:	7823      	ldrb	r3, [r4, #0]
 8005e04:	2b2e      	cmp	r3, #46	; 0x2e
 8005e06:	d10c      	bne.n	8005e22 <_vfiprintf_r+0x15a>
 8005e08:	7863      	ldrb	r3, [r4, #1]
 8005e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0c:	d134      	bne.n	8005e78 <_vfiprintf_r+0x1b0>
 8005e0e:	9b03      	ldr	r3, [sp, #12]
 8005e10:	1d1a      	adds	r2, r3, #4
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	9203      	str	r2, [sp, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bfb8      	it	lt
 8005e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e1e:	3402      	adds	r4, #2
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005ef8 <_vfiprintf_r+0x230>
 8005e26:	7821      	ldrb	r1, [r4, #0]
 8005e28:	2203      	movs	r2, #3
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	f7fa f9f8 	bl	8000220 <memchr>
 8005e30:	b138      	cbz	r0, 8005e42 <_vfiprintf_r+0x17a>
 8005e32:	9b04      	ldr	r3, [sp, #16]
 8005e34:	eba0 000a 	sub.w	r0, r0, sl
 8005e38:	2240      	movs	r2, #64	; 0x40
 8005e3a:	4082      	lsls	r2, r0
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	3401      	adds	r4, #1
 8005e40:	9304      	str	r3, [sp, #16]
 8005e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e46:	4829      	ldr	r0, [pc, #164]	; (8005eec <_vfiprintf_r+0x224>)
 8005e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e4c:	2206      	movs	r2, #6
 8005e4e:	f7fa f9e7 	bl	8000220 <memchr>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d03f      	beq.n	8005ed6 <_vfiprintf_r+0x20e>
 8005e56:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <_vfiprintf_r+0x228>)
 8005e58:	bb1b      	cbnz	r3, 8005ea2 <_vfiprintf_r+0x1da>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	3307      	adds	r3, #7
 8005e5e:	f023 0307 	bic.w	r3, r3, #7
 8005e62:	3308      	adds	r3, #8
 8005e64:	9303      	str	r3, [sp, #12]
 8005e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e68:	443b      	add	r3, r7
 8005e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6c:	e768      	b.n	8005d40 <_vfiprintf_r+0x78>
 8005e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e72:	460c      	mov	r4, r1
 8005e74:	2001      	movs	r0, #1
 8005e76:	e7a6      	b.n	8005dc6 <_vfiprintf_r+0xfe>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	3401      	adds	r4, #1
 8005e7c:	9305      	str	r3, [sp, #20]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f04f 0c0a 	mov.w	ip, #10
 8005e84:	4620      	mov	r0, r4
 8005e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e8a:	3a30      	subs	r2, #48	; 0x30
 8005e8c:	2a09      	cmp	r2, #9
 8005e8e:	d903      	bls.n	8005e98 <_vfiprintf_r+0x1d0>
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0c6      	beq.n	8005e22 <_vfiprintf_r+0x15a>
 8005e94:	9105      	str	r1, [sp, #20]
 8005e96:	e7c4      	b.n	8005e22 <_vfiprintf_r+0x15a>
 8005e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e7f0      	b.n	8005e84 <_vfiprintf_r+0x1bc>
 8005ea2:	ab03      	add	r3, sp, #12
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <_vfiprintf_r+0x22c>)
 8005eaa:	a904      	add	r1, sp, #16
 8005eac:	4630      	mov	r0, r6
 8005eae:	f3af 8000 	nop.w
 8005eb2:	4607      	mov	r7, r0
 8005eb4:	1c78      	adds	r0, r7, #1
 8005eb6:	d1d6      	bne.n	8005e66 <_vfiprintf_r+0x19e>
 8005eb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eba:	07d9      	lsls	r1, r3, #31
 8005ebc:	d405      	bmi.n	8005eca <_vfiprintf_r+0x202>
 8005ebe:	89ab      	ldrh	r3, [r5, #12]
 8005ec0:	059a      	lsls	r2, r3, #22
 8005ec2:	d402      	bmi.n	8005eca <_vfiprintf_r+0x202>
 8005ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ec6:	f7ff fdce 	bl	8005a66 <__retarget_lock_release_recursive>
 8005eca:	89ab      	ldrh	r3, [r5, #12]
 8005ecc:	065b      	lsls	r3, r3, #25
 8005ece:	f53f af1d 	bmi.w	8005d0c <_vfiprintf_r+0x44>
 8005ed2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ed4:	e71c      	b.n	8005d10 <_vfiprintf_r+0x48>
 8005ed6:	ab03      	add	r3, sp, #12
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	462a      	mov	r2, r5
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <_vfiprintf_r+0x22c>)
 8005ede:	a904      	add	r1, sp, #16
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 f879 	bl	8005fd8 <_printf_i>
 8005ee6:	e7e4      	b.n	8005eb2 <_vfiprintf_r+0x1ea>
 8005ee8:	08006570 	.word	0x08006570
 8005eec:	0800657a 	.word	0x0800657a
 8005ef0:	00000000 	.word	0x00000000
 8005ef4:	08005ca3 	.word	0x08005ca3
 8005ef8:	08006576 	.word	0x08006576

08005efc <_printf_common>:
 8005efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	4616      	mov	r6, r2
 8005f02:	4699      	mov	r9, r3
 8005f04:	688a      	ldr	r2, [r1, #8]
 8005f06:	690b      	ldr	r3, [r1, #16]
 8005f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	bfb8      	it	lt
 8005f10:	4613      	movlt	r3, r2
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f18:	4607      	mov	r7, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	b10a      	cbz	r2, 8005f22 <_printf_common+0x26>
 8005f1e:	3301      	adds	r3, #1
 8005f20:	6033      	str	r3, [r6, #0]
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	0699      	lsls	r1, r3, #26
 8005f26:	bf42      	ittt	mi
 8005f28:	6833      	ldrmi	r3, [r6, #0]
 8005f2a:	3302      	addmi	r3, #2
 8005f2c:	6033      	strmi	r3, [r6, #0]
 8005f2e:	6825      	ldr	r5, [r4, #0]
 8005f30:	f015 0506 	ands.w	r5, r5, #6
 8005f34:	d106      	bne.n	8005f44 <_printf_common+0x48>
 8005f36:	f104 0a19 	add.w	sl, r4, #25
 8005f3a:	68e3      	ldr	r3, [r4, #12]
 8005f3c:	6832      	ldr	r2, [r6, #0]
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	dc26      	bgt.n	8005f92 <_printf_common+0x96>
 8005f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f48:	1e13      	subs	r3, r2, #0
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	bf18      	it	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	0692      	lsls	r2, r2, #26
 8005f52:	d42b      	bmi.n	8005fac <_printf_common+0xb0>
 8005f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	47c0      	blx	r8
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d01e      	beq.n	8005fa0 <_printf_common+0xa4>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	6922      	ldr	r2, [r4, #16]
 8005f66:	f003 0306 	and.w	r3, r3, #6
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	bf02      	ittt	eq
 8005f6e:	68e5      	ldreq	r5, [r4, #12]
 8005f70:	6833      	ldreq	r3, [r6, #0]
 8005f72:	1aed      	subeq	r5, r5, r3
 8005f74:	68a3      	ldr	r3, [r4, #8]
 8005f76:	bf0c      	ite	eq
 8005f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f7c:	2500      	movne	r5, #0
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	bfc4      	itt	gt
 8005f82:	1a9b      	subgt	r3, r3, r2
 8005f84:	18ed      	addgt	r5, r5, r3
 8005f86:	2600      	movs	r6, #0
 8005f88:	341a      	adds	r4, #26
 8005f8a:	42b5      	cmp	r5, r6
 8005f8c:	d11a      	bne.n	8005fc4 <_printf_common+0xc8>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e008      	b.n	8005fa4 <_printf_common+0xa8>
 8005f92:	2301      	movs	r3, #1
 8005f94:	4652      	mov	r2, sl
 8005f96:	4649      	mov	r1, r9
 8005f98:	4638      	mov	r0, r7
 8005f9a:	47c0      	blx	r8
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d103      	bne.n	8005fa8 <_printf_common+0xac>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa8:	3501      	adds	r5, #1
 8005faa:	e7c6      	b.n	8005f3a <_printf_common+0x3e>
 8005fac:	18e1      	adds	r1, r4, r3
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	2030      	movs	r0, #48	; 0x30
 8005fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fb6:	4422      	add	r2, r4
 8005fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	e7c7      	b.n	8005f54 <_printf_common+0x58>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4638      	mov	r0, r7
 8005fcc:	47c0      	blx	r8
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d0e6      	beq.n	8005fa0 <_printf_common+0xa4>
 8005fd2:	3601      	adds	r6, #1
 8005fd4:	e7d9      	b.n	8005f8a <_printf_common+0x8e>
	...

08005fd8 <_printf_i>:
 8005fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	7e0f      	ldrb	r7, [r1, #24]
 8005fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fe0:	2f78      	cmp	r7, #120	; 0x78
 8005fe2:	4691      	mov	r9, r2
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	469a      	mov	sl, r3
 8005fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fee:	d807      	bhi.n	8006000 <_printf_i+0x28>
 8005ff0:	2f62      	cmp	r7, #98	; 0x62
 8005ff2:	d80a      	bhi.n	800600a <_printf_i+0x32>
 8005ff4:	2f00      	cmp	r7, #0
 8005ff6:	f000 80d4 	beq.w	80061a2 <_printf_i+0x1ca>
 8005ffa:	2f58      	cmp	r7, #88	; 0x58
 8005ffc:	f000 80c0 	beq.w	8006180 <_printf_i+0x1a8>
 8006000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006008:	e03a      	b.n	8006080 <_printf_i+0xa8>
 800600a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800600e:	2b15      	cmp	r3, #21
 8006010:	d8f6      	bhi.n	8006000 <_printf_i+0x28>
 8006012:	a101      	add	r1, pc, #4	; (adr r1, 8006018 <_printf_i+0x40>)
 8006014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006018:	08006071 	.word	0x08006071
 800601c:	08006085 	.word	0x08006085
 8006020:	08006001 	.word	0x08006001
 8006024:	08006001 	.word	0x08006001
 8006028:	08006001 	.word	0x08006001
 800602c:	08006001 	.word	0x08006001
 8006030:	08006085 	.word	0x08006085
 8006034:	08006001 	.word	0x08006001
 8006038:	08006001 	.word	0x08006001
 800603c:	08006001 	.word	0x08006001
 8006040:	08006001 	.word	0x08006001
 8006044:	08006189 	.word	0x08006189
 8006048:	080060b1 	.word	0x080060b1
 800604c:	08006143 	.word	0x08006143
 8006050:	08006001 	.word	0x08006001
 8006054:	08006001 	.word	0x08006001
 8006058:	080061ab 	.word	0x080061ab
 800605c:	08006001 	.word	0x08006001
 8006060:	080060b1 	.word	0x080060b1
 8006064:	08006001 	.word	0x08006001
 8006068:	08006001 	.word	0x08006001
 800606c:	0800614b 	.word	0x0800614b
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	1d1a      	adds	r2, r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	602a      	str	r2, [r5, #0]
 8006078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800607c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006080:	2301      	movs	r3, #1
 8006082:	e09f      	b.n	80061c4 <_printf_i+0x1ec>
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	0607      	lsls	r7, r0, #24
 800608a:	f103 0104 	add.w	r1, r3, #4
 800608e:	6029      	str	r1, [r5, #0]
 8006090:	d501      	bpl.n	8006096 <_printf_i+0xbe>
 8006092:	681e      	ldr	r6, [r3, #0]
 8006094:	e003      	b.n	800609e <_printf_i+0xc6>
 8006096:	0646      	lsls	r6, r0, #25
 8006098:	d5fb      	bpl.n	8006092 <_printf_i+0xba>
 800609a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800609e:	2e00      	cmp	r6, #0
 80060a0:	da03      	bge.n	80060aa <_printf_i+0xd2>
 80060a2:	232d      	movs	r3, #45	; 0x2d
 80060a4:	4276      	negs	r6, r6
 80060a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060aa:	485a      	ldr	r0, [pc, #360]	; (8006214 <_printf_i+0x23c>)
 80060ac:	230a      	movs	r3, #10
 80060ae:	e012      	b.n	80060d6 <_printf_i+0xfe>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	6820      	ldr	r0, [r4, #0]
 80060b4:	1d19      	adds	r1, r3, #4
 80060b6:	6029      	str	r1, [r5, #0]
 80060b8:	0605      	lsls	r5, r0, #24
 80060ba:	d501      	bpl.n	80060c0 <_printf_i+0xe8>
 80060bc:	681e      	ldr	r6, [r3, #0]
 80060be:	e002      	b.n	80060c6 <_printf_i+0xee>
 80060c0:	0641      	lsls	r1, r0, #25
 80060c2:	d5fb      	bpl.n	80060bc <_printf_i+0xe4>
 80060c4:	881e      	ldrh	r6, [r3, #0]
 80060c6:	4853      	ldr	r0, [pc, #332]	; (8006214 <_printf_i+0x23c>)
 80060c8:	2f6f      	cmp	r7, #111	; 0x6f
 80060ca:	bf0c      	ite	eq
 80060cc:	2308      	moveq	r3, #8
 80060ce:	230a      	movne	r3, #10
 80060d0:	2100      	movs	r1, #0
 80060d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060d6:	6865      	ldr	r5, [r4, #4]
 80060d8:	60a5      	str	r5, [r4, #8]
 80060da:	2d00      	cmp	r5, #0
 80060dc:	bfa2      	ittt	ge
 80060de:	6821      	ldrge	r1, [r4, #0]
 80060e0:	f021 0104 	bicge.w	r1, r1, #4
 80060e4:	6021      	strge	r1, [r4, #0]
 80060e6:	b90e      	cbnz	r6, 80060ec <_printf_i+0x114>
 80060e8:	2d00      	cmp	r5, #0
 80060ea:	d04b      	beq.n	8006184 <_printf_i+0x1ac>
 80060ec:	4615      	mov	r5, r2
 80060ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80060f2:	fb03 6711 	mls	r7, r3, r1, r6
 80060f6:	5dc7      	ldrb	r7, [r0, r7]
 80060f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060fc:	4637      	mov	r7, r6
 80060fe:	42bb      	cmp	r3, r7
 8006100:	460e      	mov	r6, r1
 8006102:	d9f4      	bls.n	80060ee <_printf_i+0x116>
 8006104:	2b08      	cmp	r3, #8
 8006106:	d10b      	bne.n	8006120 <_printf_i+0x148>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	07de      	lsls	r6, r3, #31
 800610c:	d508      	bpl.n	8006120 <_printf_i+0x148>
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	6861      	ldr	r1, [r4, #4]
 8006112:	4299      	cmp	r1, r3
 8006114:	bfde      	ittt	le
 8006116:	2330      	movle	r3, #48	; 0x30
 8006118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800611c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006120:	1b52      	subs	r2, r2, r5
 8006122:	6122      	str	r2, [r4, #16]
 8006124:	f8cd a000 	str.w	sl, [sp]
 8006128:	464b      	mov	r3, r9
 800612a:	aa03      	add	r2, sp, #12
 800612c:	4621      	mov	r1, r4
 800612e:	4640      	mov	r0, r8
 8006130:	f7ff fee4 	bl	8005efc <_printf_common>
 8006134:	3001      	adds	r0, #1
 8006136:	d14a      	bne.n	80061ce <_printf_i+0x1f6>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	b004      	add	sp, #16
 800613e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	f043 0320 	orr.w	r3, r3, #32
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	4833      	ldr	r0, [pc, #204]	; (8006218 <_printf_i+0x240>)
 800614c:	2778      	movs	r7, #120	; 0x78
 800614e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	6829      	ldr	r1, [r5, #0]
 8006156:	061f      	lsls	r7, r3, #24
 8006158:	f851 6b04 	ldr.w	r6, [r1], #4
 800615c:	d402      	bmi.n	8006164 <_printf_i+0x18c>
 800615e:	065f      	lsls	r7, r3, #25
 8006160:	bf48      	it	mi
 8006162:	b2b6      	uxthmi	r6, r6
 8006164:	07df      	lsls	r7, r3, #31
 8006166:	bf48      	it	mi
 8006168:	f043 0320 	orrmi.w	r3, r3, #32
 800616c:	6029      	str	r1, [r5, #0]
 800616e:	bf48      	it	mi
 8006170:	6023      	strmi	r3, [r4, #0]
 8006172:	b91e      	cbnz	r6, 800617c <_printf_i+0x1a4>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	f023 0320 	bic.w	r3, r3, #32
 800617a:	6023      	str	r3, [r4, #0]
 800617c:	2310      	movs	r3, #16
 800617e:	e7a7      	b.n	80060d0 <_printf_i+0xf8>
 8006180:	4824      	ldr	r0, [pc, #144]	; (8006214 <_printf_i+0x23c>)
 8006182:	e7e4      	b.n	800614e <_printf_i+0x176>
 8006184:	4615      	mov	r5, r2
 8006186:	e7bd      	b.n	8006104 <_printf_i+0x12c>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	6826      	ldr	r6, [r4, #0]
 800618c:	6961      	ldr	r1, [r4, #20]
 800618e:	1d18      	adds	r0, r3, #4
 8006190:	6028      	str	r0, [r5, #0]
 8006192:	0635      	lsls	r5, r6, #24
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	d501      	bpl.n	800619c <_printf_i+0x1c4>
 8006198:	6019      	str	r1, [r3, #0]
 800619a:	e002      	b.n	80061a2 <_printf_i+0x1ca>
 800619c:	0670      	lsls	r0, r6, #25
 800619e:	d5fb      	bpl.n	8006198 <_printf_i+0x1c0>
 80061a0:	8019      	strh	r1, [r3, #0]
 80061a2:	2300      	movs	r3, #0
 80061a4:	6123      	str	r3, [r4, #16]
 80061a6:	4615      	mov	r5, r2
 80061a8:	e7bc      	b.n	8006124 <_printf_i+0x14c>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	1d1a      	adds	r2, r3, #4
 80061ae:	602a      	str	r2, [r5, #0]
 80061b0:	681d      	ldr	r5, [r3, #0]
 80061b2:	6862      	ldr	r2, [r4, #4]
 80061b4:	2100      	movs	r1, #0
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7fa f832 	bl	8000220 <memchr>
 80061bc:	b108      	cbz	r0, 80061c2 <_printf_i+0x1ea>
 80061be:	1b40      	subs	r0, r0, r5
 80061c0:	6060      	str	r0, [r4, #4]
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	6123      	str	r3, [r4, #16]
 80061c6:	2300      	movs	r3, #0
 80061c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061cc:	e7aa      	b.n	8006124 <_printf_i+0x14c>
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	462a      	mov	r2, r5
 80061d2:	4649      	mov	r1, r9
 80061d4:	4640      	mov	r0, r8
 80061d6:	47d0      	blx	sl
 80061d8:	3001      	adds	r0, #1
 80061da:	d0ad      	beq.n	8006138 <_printf_i+0x160>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	079b      	lsls	r3, r3, #30
 80061e0:	d413      	bmi.n	800620a <_printf_i+0x232>
 80061e2:	68e0      	ldr	r0, [r4, #12]
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	4298      	cmp	r0, r3
 80061e8:	bfb8      	it	lt
 80061ea:	4618      	movlt	r0, r3
 80061ec:	e7a6      	b.n	800613c <_printf_i+0x164>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4632      	mov	r2, r6
 80061f2:	4649      	mov	r1, r9
 80061f4:	4640      	mov	r0, r8
 80061f6:	47d0      	blx	sl
 80061f8:	3001      	adds	r0, #1
 80061fa:	d09d      	beq.n	8006138 <_printf_i+0x160>
 80061fc:	3501      	adds	r5, #1
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	9903      	ldr	r1, [sp, #12]
 8006202:	1a5b      	subs	r3, r3, r1
 8006204:	42ab      	cmp	r3, r5
 8006206:	dcf2      	bgt.n	80061ee <_printf_i+0x216>
 8006208:	e7eb      	b.n	80061e2 <_printf_i+0x20a>
 800620a:	2500      	movs	r5, #0
 800620c:	f104 0619 	add.w	r6, r4, #25
 8006210:	e7f5      	b.n	80061fe <_printf_i+0x226>
 8006212:	bf00      	nop
 8006214:	08006581 	.word	0x08006581
 8006218:	08006592 	.word	0x08006592

0800621c <__sflush_r>:
 800621c:	898a      	ldrh	r2, [r1, #12]
 800621e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006222:	4605      	mov	r5, r0
 8006224:	0710      	lsls	r0, r2, #28
 8006226:	460c      	mov	r4, r1
 8006228:	d458      	bmi.n	80062dc <__sflush_r+0xc0>
 800622a:	684b      	ldr	r3, [r1, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	dc05      	bgt.n	800623c <__sflush_r+0x20>
 8006230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	dc02      	bgt.n	800623c <__sflush_r+0x20>
 8006236:	2000      	movs	r0, #0
 8006238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800623c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800623e:	2e00      	cmp	r6, #0
 8006240:	d0f9      	beq.n	8006236 <__sflush_r+0x1a>
 8006242:	2300      	movs	r3, #0
 8006244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006248:	682f      	ldr	r7, [r5, #0]
 800624a:	6a21      	ldr	r1, [r4, #32]
 800624c:	602b      	str	r3, [r5, #0]
 800624e:	d032      	beq.n	80062b6 <__sflush_r+0x9a>
 8006250:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	075a      	lsls	r2, r3, #29
 8006256:	d505      	bpl.n	8006264 <__sflush_r+0x48>
 8006258:	6863      	ldr	r3, [r4, #4]
 800625a:	1ac0      	subs	r0, r0, r3
 800625c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800625e:	b10b      	cbz	r3, 8006264 <__sflush_r+0x48>
 8006260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006262:	1ac0      	subs	r0, r0, r3
 8006264:	2300      	movs	r3, #0
 8006266:	4602      	mov	r2, r0
 8006268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800626a:	6a21      	ldr	r1, [r4, #32]
 800626c:	4628      	mov	r0, r5
 800626e:	47b0      	blx	r6
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	d106      	bne.n	8006284 <__sflush_r+0x68>
 8006276:	6829      	ldr	r1, [r5, #0]
 8006278:	291d      	cmp	r1, #29
 800627a:	d82b      	bhi.n	80062d4 <__sflush_r+0xb8>
 800627c:	4a29      	ldr	r2, [pc, #164]	; (8006324 <__sflush_r+0x108>)
 800627e:	410a      	asrs	r2, r1
 8006280:	07d6      	lsls	r6, r2, #31
 8006282:	d427      	bmi.n	80062d4 <__sflush_r+0xb8>
 8006284:	2200      	movs	r2, #0
 8006286:	6062      	str	r2, [r4, #4]
 8006288:	04d9      	lsls	r1, r3, #19
 800628a:	6922      	ldr	r2, [r4, #16]
 800628c:	6022      	str	r2, [r4, #0]
 800628e:	d504      	bpl.n	800629a <__sflush_r+0x7e>
 8006290:	1c42      	adds	r2, r0, #1
 8006292:	d101      	bne.n	8006298 <__sflush_r+0x7c>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b903      	cbnz	r3, 800629a <__sflush_r+0x7e>
 8006298:	6560      	str	r0, [r4, #84]	; 0x54
 800629a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800629c:	602f      	str	r7, [r5, #0]
 800629e:	2900      	cmp	r1, #0
 80062a0:	d0c9      	beq.n	8006236 <__sflush_r+0x1a>
 80062a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062a6:	4299      	cmp	r1, r3
 80062a8:	d002      	beq.n	80062b0 <__sflush_r+0x94>
 80062aa:	4628      	mov	r0, r5
 80062ac:	f7ff fbea 	bl	8005a84 <_free_r>
 80062b0:	2000      	movs	r0, #0
 80062b2:	6360      	str	r0, [r4, #52]	; 0x34
 80062b4:	e7c0      	b.n	8006238 <__sflush_r+0x1c>
 80062b6:	2301      	movs	r3, #1
 80062b8:	4628      	mov	r0, r5
 80062ba:	47b0      	blx	r6
 80062bc:	1c41      	adds	r1, r0, #1
 80062be:	d1c8      	bne.n	8006252 <__sflush_r+0x36>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0c5      	beq.n	8006252 <__sflush_r+0x36>
 80062c6:	2b1d      	cmp	r3, #29
 80062c8:	d001      	beq.n	80062ce <__sflush_r+0xb2>
 80062ca:	2b16      	cmp	r3, #22
 80062cc:	d101      	bne.n	80062d2 <__sflush_r+0xb6>
 80062ce:	602f      	str	r7, [r5, #0]
 80062d0:	e7b1      	b.n	8006236 <__sflush_r+0x1a>
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d8:	81a3      	strh	r3, [r4, #12]
 80062da:	e7ad      	b.n	8006238 <__sflush_r+0x1c>
 80062dc:	690f      	ldr	r7, [r1, #16]
 80062de:	2f00      	cmp	r7, #0
 80062e0:	d0a9      	beq.n	8006236 <__sflush_r+0x1a>
 80062e2:	0793      	lsls	r3, r2, #30
 80062e4:	680e      	ldr	r6, [r1, #0]
 80062e6:	bf08      	it	eq
 80062e8:	694b      	ldreq	r3, [r1, #20]
 80062ea:	600f      	str	r7, [r1, #0]
 80062ec:	bf18      	it	ne
 80062ee:	2300      	movne	r3, #0
 80062f0:	eba6 0807 	sub.w	r8, r6, r7
 80062f4:	608b      	str	r3, [r1, #8]
 80062f6:	f1b8 0f00 	cmp.w	r8, #0
 80062fa:	dd9c      	ble.n	8006236 <__sflush_r+0x1a>
 80062fc:	6a21      	ldr	r1, [r4, #32]
 80062fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006300:	4643      	mov	r3, r8
 8006302:	463a      	mov	r2, r7
 8006304:	4628      	mov	r0, r5
 8006306:	47b0      	blx	r6
 8006308:	2800      	cmp	r0, #0
 800630a:	dc06      	bgt.n	800631a <__sflush_r+0xfe>
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006312:	81a3      	strh	r3, [r4, #12]
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	e78e      	b.n	8006238 <__sflush_r+0x1c>
 800631a:	4407      	add	r7, r0
 800631c:	eba8 0800 	sub.w	r8, r8, r0
 8006320:	e7e9      	b.n	80062f6 <__sflush_r+0xda>
 8006322:	bf00      	nop
 8006324:	dfbffffe 	.word	0xdfbffffe

08006328 <_fflush_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	4605      	mov	r5, r0
 800632e:	460c      	mov	r4, r1
 8006330:	b913      	cbnz	r3, 8006338 <_fflush_r+0x10>
 8006332:	2500      	movs	r5, #0
 8006334:	4628      	mov	r0, r5
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	b118      	cbz	r0, 8006342 <_fflush_r+0x1a>
 800633a:	6a03      	ldr	r3, [r0, #32]
 800633c:	b90b      	cbnz	r3, 8006342 <_fflush_r+0x1a>
 800633e:	f7ff f947 	bl	80055d0 <__sinit>
 8006342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f3      	beq.n	8006332 <_fflush_r+0xa>
 800634a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800634c:	07d0      	lsls	r0, r2, #31
 800634e:	d404      	bmi.n	800635a <_fflush_r+0x32>
 8006350:	0599      	lsls	r1, r3, #22
 8006352:	d402      	bmi.n	800635a <_fflush_r+0x32>
 8006354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006356:	f7ff fb85 	bl	8005a64 <__retarget_lock_acquire_recursive>
 800635a:	4628      	mov	r0, r5
 800635c:	4621      	mov	r1, r4
 800635e:	f7ff ff5d 	bl	800621c <__sflush_r>
 8006362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006364:	07da      	lsls	r2, r3, #31
 8006366:	4605      	mov	r5, r0
 8006368:	d4e4      	bmi.n	8006334 <_fflush_r+0xc>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	059b      	lsls	r3, r3, #22
 800636e:	d4e1      	bmi.n	8006334 <_fflush_r+0xc>
 8006370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006372:	f7ff fb78 	bl	8005a66 <__retarget_lock_release_recursive>
 8006376:	e7dd      	b.n	8006334 <_fflush_r+0xc>

08006378 <__swhatbuf_r>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	460c      	mov	r4, r1
 800637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006380:	2900      	cmp	r1, #0
 8006382:	b096      	sub	sp, #88	; 0x58
 8006384:	4615      	mov	r5, r2
 8006386:	461e      	mov	r6, r3
 8006388:	da0d      	bge.n	80063a6 <__swhatbuf_r+0x2e>
 800638a:	89a3      	ldrh	r3, [r4, #12]
 800638c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006390:	f04f 0100 	mov.w	r1, #0
 8006394:	bf0c      	ite	eq
 8006396:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800639a:	2340      	movne	r3, #64	; 0x40
 800639c:	2000      	movs	r0, #0
 800639e:	6031      	str	r1, [r6, #0]
 80063a0:	602b      	str	r3, [r5, #0]
 80063a2:	b016      	add	sp, #88	; 0x58
 80063a4:	bd70      	pop	{r4, r5, r6, pc}
 80063a6:	466a      	mov	r2, sp
 80063a8:	f000 f848 	bl	800643c <_fstat_r>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	dbec      	blt.n	800638a <__swhatbuf_r+0x12>
 80063b0:	9901      	ldr	r1, [sp, #4]
 80063b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063ba:	4259      	negs	r1, r3
 80063bc:	4159      	adcs	r1, r3
 80063be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063c2:	e7eb      	b.n	800639c <__swhatbuf_r+0x24>

080063c4 <__smakebuf_r>:
 80063c4:	898b      	ldrh	r3, [r1, #12]
 80063c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063c8:	079d      	lsls	r5, r3, #30
 80063ca:	4606      	mov	r6, r0
 80063cc:	460c      	mov	r4, r1
 80063ce:	d507      	bpl.n	80063e0 <__smakebuf_r+0x1c>
 80063d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	2301      	movs	r3, #1
 80063da:	6163      	str	r3, [r4, #20]
 80063dc:	b002      	add	sp, #8
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	ab01      	add	r3, sp, #4
 80063e2:	466a      	mov	r2, sp
 80063e4:	f7ff ffc8 	bl	8006378 <__swhatbuf_r>
 80063e8:	9900      	ldr	r1, [sp, #0]
 80063ea:	4605      	mov	r5, r0
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff fbb5 	bl	8005b5c <_malloc_r>
 80063f2:	b948      	cbnz	r0, 8006408 <__smakebuf_r+0x44>
 80063f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f8:	059a      	lsls	r2, r3, #22
 80063fa:	d4ef      	bmi.n	80063dc <__smakebuf_r+0x18>
 80063fc:	f023 0303 	bic.w	r3, r3, #3
 8006400:	f043 0302 	orr.w	r3, r3, #2
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	e7e3      	b.n	80063d0 <__smakebuf_r+0xc>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	6020      	str	r0, [r4, #0]
 800640c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	9b00      	ldr	r3, [sp, #0]
 8006414:	6163      	str	r3, [r4, #20]
 8006416:	9b01      	ldr	r3, [sp, #4]
 8006418:	6120      	str	r0, [r4, #16]
 800641a:	b15b      	cbz	r3, 8006434 <__smakebuf_r+0x70>
 800641c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006420:	4630      	mov	r0, r6
 8006422:	f000 f81d 	bl	8006460 <_isatty_r>
 8006426:	b128      	cbz	r0, 8006434 <__smakebuf_r+0x70>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	f023 0303 	bic.w	r3, r3, #3
 800642e:	f043 0301 	orr.w	r3, r3, #1
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	431d      	orrs	r5, r3
 8006438:	81a5      	strh	r5, [r4, #12]
 800643a:	e7cf      	b.n	80063dc <__smakebuf_r+0x18>

0800643c <_fstat_r>:
 800643c:	b538      	push	{r3, r4, r5, lr}
 800643e:	4d07      	ldr	r5, [pc, #28]	; (800645c <_fstat_r+0x20>)
 8006440:	2300      	movs	r3, #0
 8006442:	4604      	mov	r4, r0
 8006444:	4608      	mov	r0, r1
 8006446:	4611      	mov	r1, r2
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	f7fa fc12 	bl	8000c72 <_fstat>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d102      	bne.n	8006458 <_fstat_r+0x1c>
 8006452:	682b      	ldr	r3, [r5, #0]
 8006454:	b103      	cbz	r3, 8006458 <_fstat_r+0x1c>
 8006456:	6023      	str	r3, [r4, #0]
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop
 800645c:	20000fc4 	.word	0x20000fc4

08006460 <_isatty_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d06      	ldr	r5, [pc, #24]	; (800647c <_isatty_r+0x1c>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fa fc11 	bl	8000c92 <_isatty>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_isatty_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_isatty_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	20000fc4 	.word	0x20000fc4

08006480 <_sbrk_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d06      	ldr	r5, [pc, #24]	; (800649c <_sbrk_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fa fc1a 	bl	8000cc4 <_sbrk>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_sbrk_r+0x1a>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_sbrk_r+0x1a>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20000fc4 	.word	0x20000fc4

080064a0 <_init>:
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	bf00      	nop
 80064a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a6:	bc08      	pop	{r3}
 80064a8:	469e      	mov	lr, r3
 80064aa:	4770      	bx	lr

080064ac <_fini>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr
